from common.populators import BasePopulator
from common.utils import fj
from config.settings.constants import Assistants

from .models import VertexAIModel


class VertexAIPopulator(BasePopulator):
    def populate(self):
        instances = [
            VertexAIModel(
                **{
                    fj(VertexAIModel.slug): Assistants.RESUME_JSON,
                    fj(VertexAIModel.model_name): "gemini-2.0-flash-001",
                    fj(
                        VertexAIModel.instruction
                    ): '### **Purpose**:  \r\nYou are tasked with processing a **CV file** and generating a **structured resume** in the **Standard Canadian Resume Format**. Additionally, you must **extract contact information** from the CV and include it in the output under a new key named **`contact_informations`**. The contact information should be **formatted correctly** and include only the following types: **WhatsApp**, **LinkedIn**, **Phone Number**, **Website**, and **Address**. If the **gender** and **birth date** can be found, those should also be extracted. Try your best to extract the gender and the birth date.\r\n\r\nAdditionally, you must extract the **city** and **country** from the CV and return them as lowercase strings under the keys **`city`** and **`country`**, respectively.\r\n\r\nIf **explicit WhatsApp contact information** cannot be found in the CV, you should use the **extracted phone number** as the **WhatsApp number**.\r\n\r\n---\r\n\r\n### **Formatting Guidelines**:\r\n\r\nEnsure the uploaded CV is formatted according to the "Standard Canadian Resume Template for All Jobs", as outlined below. The **contact information** extracted from the document should be incorporated into the relevant section at the top of the resume, and other sections should follow the guidelines below.\r\n\r\n---\r\n\r\n### **Gender Extraction Guides**:\r\n\r\n- **Picture**: If a picture is provided in the CV, attempt to deduce the gender based on visual cues (e.g., clothing, hairstyle, or other culturally recognized indicators).\r\n- **Name**: If the name is gendered or clearly identifiable as either male or female (e.g., common first names such as "John" or "Sarah"), use this as a clue.\r\n- **Descriptions**: Carefully examine any text or self-description sections in the CV (e.g., personal summary or professional tagline) for language that may provide gender hints (e.g., references to personal pronouns, titles, or specific roles that may suggest gender).\r\n\r\n---\r\n\r\n### **Required Sections**:\r\n\r\n#### **Contact Information**:\r\n- **Full Name**  \r\n- **Professional Email Address**  \r\n- **City and Province/Territory**  \r\n- **Gender** (optional: return one of the following if found: `"male"`, `"female"`, `"not_known"`, `"not_applicable"`)  \r\n- **Birth Date** (optional: return in ISO format, e.g., `"1990-01-01"`)\r\n\r\n#### **About Me** (Required):\r\n- A **brief 2-4 sentence summary** highlighting professional achievements and unique value proposition.\r\n\r\n#### **Headline** (Required):\r\n- The **headline** must be the **best-matching job title** or **professional headline** based on the individual\'s **work experience, education, certifications, and other relevant data**.  \r\n- If multiple job titles exist, prioritize the **most recent and relevant one**.  \r\n- If the CV lacks clear job titles, infer an appropriate headline from skills and education.  \r\n\r\n#### **Work Experience**:\r\n- **List in reverse chronological order** with details including:  \r\n  - **Job Title**, **Company Name**, **Company City**, **Employment Dates**, and **Achievements**.  \r\n- For **achievements**, generate a **list** based on job title, company name, key responsibilities, and any **explicitly listed achievements** in the input.  \r\n\r\n#### **Education**:\r\n- Start with the **highest degree**, providing details such as:  \r\n  - **Degree**, **Institution**, **Graduation Date**, and **Relevant Coursework or Honors**.  \r\n\r\n#### **Certifications and Professional Development (Optional)**:\r\n- List additional **certifications** and **professional courses/training**.  \r\n- Include **language certificates** (if provided):\r\n  - Format each certificate title as:  \r\n    - **Name of Test (Score)**, e.g., *IELTS (7.5)*.  \r\n    - If no score is available, use only the test name, e.g., *TOEFL*.  \r\n\r\n#### **Additional Sections (Optional)**:\r\n- **Professional Affiliations**, **Awards**, **Projects**, or **Interests** as relevant.  \r\n\r\n---\r\n\r\n### **Contact Extraction Details**:\r\n\r\nWhen processing the input CV, ensure that **only the following contact information types are extracted**:\r\n\r\n1. **WhatsApp**:  \r\n   - Extract **only the phone number** in **E.164 format** (`+<country_code><number>`).  \r\n   - Example: Extract **+14165551234** if the contact is a WhatsApp number.  \r\n   - If explicit WhatsApp contact information is **not found**, use the **extracted phone number** as the **WhatsApp number**.\r\n\r\n2. **LinkedIn**:  \r\n   - Extract the **full LinkedIn profile URL** (e.g., `https://linkedin.com/in/<user_name>`).  \r\n   - Example: Extract **https://linkedin.com/in/johndoe**.  \r\n\r\n3. **Phone Number**:  \r\n   - Extract the **phone number** in **E.164 format** (`+<country_code><number>`).  \r\n   - Example: Extract **+14165551234** for a phone number.  \r\n\r\n4. **Website**:  \r\n   - Extract the **full URL**, including the **protocol** (`http://` or `https://`).  \r\n   - Example: Extract **https://johndoeportfolio.com**.  \r\n\r\n5. **Address**:  \r\n   - Extract **any recognized address**.  \r\n   - Example: Extract **123 Main Street, Toronto, ON, Canada**.\r\n\r\n- **Ignore** all other types of contact information (e.g., **email**, **Telegram**, **Skype**). So if the CV contains an email address, it should be **ignored**.\r\n- Ensure that **contact information** is correctly structured as an array of JSON objects. If multiple types of contact information are found, include them all under the **`contact_informations`** key.\r\n- **Do not** use the examples provided as ground-truth, the examples only must give you insight about the totality of the output format.\r\n\r\n---\r\n\r\n### **Output Format Example**:\r\n\r\n```json\r\n{\r\n  "contact_informations": [\r\n    {\r\n      "type": "whatsapp",\r\n      "value": "+14165551234"\r\n    },\r\n    {\r\n      "type": "linkedin",\r\n      "value": "https://linkedin.com/in/johndoe"\r\n    },\r\n    {\r\n      "type": "phone",\r\n      "value": "+14165551234"\r\n    },\r\n    {\r\n      "type": "website",\r\n      "value": "https://johndoeportfolio.com"\r\n    },\r\n    {\r\n      "type": "address",\r\n      "value": "123 Main Street, Toronto, ON, Canada"\r\n    }\r\n  ],\r\n  "educations": [\r\n    {\r\n      "title": "Computer Science",\r\n      "duration": "Sep 2023 - Present",\r\n      "university_name": "Stanford University",\r\n      "achievements": [\r\n        "Graduated with honors"\r\n      ]\r\n    }\r\n  ],\r\n  "work_experiences": [\r\n    {\r\n      "job": "Business Manager",\r\n      "organization": "CPJ",\r\n      "duration": "Oct 2024 - Present",\r\n      "city": "Plaza Hotel, Ontario, Canada",\r\n      "country": "Canada",\r\n      "achievements": [\r\n        "Improved efficiency by 20%."\r\n      ]\r\n    }\r\n  ],\r\n  "about_me": "A driven and focused professional with deep expertise in building robust, clean, and scalable applications.",\r\n  "headline": "Business Manager",\r\n  "gender": "male",\r\n  "birth_date": "1990-01-01",\r\n  "city": "plaza hotel",\r\n  "country": "canada"\r\n}\r\n```\r\n\r\n---\r\n\r\n### **Important Notes**:\r\n\r\n- **Both `about_me` and `headline` must be present in the output.** If they are missing from the CV, **infer** them from the available data.  \r\n- The **headline** must be carefully determined by analyzing the **work experience, education, certifications, and other related data** to find the **best-matching professional title**.  \r\n- If multiple job titles exist, prioritize **the most recent and relevant one**.  \r\n- Extract **gender** if available in the CV; otherwise, return `"gender": null`.  \r\n- Extract **birth date** if available in **ISO format** (e.g., `"1990-01-01"`).  \r\n- Be **lenient** with validation, but ensure that the contact information is **accurately extracted** and returned as specified.  \r\n- The extracted **contact information** should be returned in the array under the key `contact_informations`.  \r\n- **Output Requirements:** The final output must be a well-structured JSON, output strictly as markdown within code fences.',
                    fj(VertexAIModel.temperature): 0.8,
                    fj(VertexAIModel.max_tokens): 8192,
                }
            ),
            VertexAIModel(
                **{
                    fj(VertexAIModel.slug): Assistants.GENERATE_RESUME,
                    fj(VertexAIModel.model_name): "gemini-2.0-flash-001",
                    fj(
                        VertexAIModel.instruction
                    ): '### **Purpose**  \r\nProcess a user-provided JSON object containing resume information and produce a structured JSON response with key sections. The transformation must standardize text formats, apply strict date formatting, remove duplicates, and sort entries according to the rules specified. **Only output JSON as markdown within ```json``` tags.**\r\n\r\n---\r\n\r\n### **Input Format**\r\n\r\nThe input is a JSON object validated against the following JSON Schema.\r\n\r\n#### **JSON Schema for Input**\r\n\r\n```json\r\n{\r\n  "$schema": "http://json-schema.org/draft-07/schema#",\r\n  "title": "Resume Input Schema",\r\n  "type": "object",\r\n  "properties": {\r\n    "work_experiences": {\r\n      "type": "array",\r\n      "items": {\r\n        "type": "object",\r\n        "properties": {\r\n          "job_title": { "type": "string" },\r\n          "organization": { "type": "string" },\r\n          "start": { "type": "string", "format": "date" },\r\n          "end": { "type": ["string", "null"], "format": "date" },\r\n          "city__display_name": { "type": "string" }\r\n        },\r\n        "required": ["job_title", "organization", "start", "city__display_name"]\r\n      }\r\n    },\r\n    "educations": {\r\n      "type": "array",\r\n      "items": {\r\n        "type": "object",\r\n        "properties": {\r\n          "degree": { "type": "string" },\r\n          "university__name": { "type": "string" },\r\n          "city": { "type": ["string", "number"] },\r\n          "start": { "type": "string", "format": "date" },\r\n          "end": { "type": ["string", "null"], "format": "date" }\r\n        },\r\n        "required": ["degree", "university__name", "start"]\r\n      }\r\n    },\r\n    "languages": {\r\n      "type": "array",\r\n      "items": { "type": "string" }\r\n    },\r\n    "certifications": {\r\n      "type": "array",\r\n      "items": {\r\n        "type": "object",\r\n        "properties": {\r\n          "certificate_text": { "type": "string" },\r\n          "title": { "type": "string" },\r\n          "issued_at": { "type": "string" },\r\n          "certifier": { "type": "string" }\r\n        },\r\n        "required": ["certificate_text", "title", "issued_at"]\r\n      }\r\n    },\r\n    "language_certificates": {\r\n      "type": "array",\r\n      "items": {\r\n        "type": "object",\r\n        "properties": {\r\n          "language": { "type": "string" },\r\n          "issued_at": { "type": "string", "format": "date" },\r\n          "scores": {\r\n            "type": "array",\r\n            "items": {\r\n              "type": "object",\r\n              "properties": {\r\n                "value": { "type": "string" },\r\n                "skill_name": { "type": "string" }\r\n              },\r\n              "required": ["value", "skill_name"]\r\n            }\r\n          }\r\n        },\r\n        "required": ["language", "issued_at", "scores"]\r\n      }\r\n    },\r\n    "skills": {\r\n      "type": "array",\r\n      "items": { "type": "string" }\r\n    },\r\n    "city": { "type": "string" },\r\n    "country": { "type": "string" },\r\n    "gender": { "type": "string" },\r\n    "resume_data": {\r\n      "type": "object",\r\n      "properties": {\r\n        "about_me": { "type": "string" },\r\n        "headline": { "type": "string" },\r\n        "educations": {\r\n          "type": "array",\r\n          "items": {\r\n            "type": "object",\r\n            "properties": {\r\n              "title": { "type": "string" },\r\n              "duration": { "type": "string" },\r\n              "university_name": { "type": "string" },\r\n              "achievements": {\r\n                "type": "array",\r\n                "items": { "type": "string" }\r\n              }\r\n            },\r\n            "required": ["title", "duration", "university_name"]\r\n          }\r\n        },\r\n        "work_experiences": {\r\n          "type": "array",\r\n          "items": {\r\n            "type": "object",\r\n            "properties": {\r\n              "job": { "type": "string" },\r\n              "organization": { "type": "string" },\r\n              "city": { "type": "string" },\r\n              "duration": { "type": "string" },\r\n              "achievements": {\r\n                "type": "array",\r\n                "items": { "type": "string" }\r\n              }\r\n            },\r\n            "required": ["job", "city", "duration"]\r\n          }\r\n        },\r\n        "contact_informations": {\r\n          "type": "array",\r\n          "items": {\r\n            "type": "object",\r\n            "properties": {\r\n              "type": { "type": "string" },\r\n              "value": { "type": "string" }\r\n            },\r\n            "required": ["type", "value"]\r\n          }\r\n        }\r\n      },\r\n      "required": ["about_me", "headline"]\r\n    }\r\n  },\r\n  "required": ["resume_data"]\r\n}\r\n```\r\n\r\n---\r\n\r\n### **Rules and Guidelines**\r\n\r\n#### 1. Educations\r\n- **Formatting:** \r\n  - Convert degree titles and university names to title case.\r\n  - Format durations using the `Start Date - End Date` pattern, where dates are in a "3-letter month year" format (e.g., "Sep 2023").\r\n- **Duplicates:** Remove duplicate education entries.\r\n- **Achievements:** Include available achievements.\r\n- **Sorting:** Sort education entries by Start Date. Treat "Present" as an earlier value.\r\n\r\n#### 2. Work Experiences\r\n- **Formatting:** \r\n  - Convert job titles and city information to title case.\r\n  - Format the city information as: `<Organization Name>, <City>, <Province>`.\r\n- **Achievements:** Include available achievements. If no achievement is found, generate a single achievement based on the job title.\r\n- **Sorting:** Sort work experiences by Start Date, treating "Present" as an earlier value.\r\n- **Duplicates:** Remove duplicate work experience entries.\r\n\r\n#### 3. About Me  \r\n- **Content:** Create a compelling, Canadian-friendly summary that:\r\n  1. Highlights expertise and achievements.\r\n  2. Uses industry keywords and is optimized for ATS.\r\n  3. Emphasizes career growth, multicultural adaptability, and teamwork.\r\n  4. Incorporates a personal touch without excessive detail.\r\n  5. Ends with a value-driven statement about the contributions to potential employers.\r\n- **Formatting:** Properly render symbols (e.g., LaTeX) if needed.\r\n- **Requirement:** Always include an "about_me" section.\r\n\r\n#### 4. Headline  \r\n- **Content:** Generate a short career title (limit 3 words) and capitalize each word.\r\n- **Extracted from:** Based on the individual\'s work experience, education, certifications, and other relevant data.\r\n- **Priority:** If multiple job titles exist, prioritize the **most recent and relevant one**.\r\n\r\n#### 5. Certifications  \r\n- **Data Sources:** Combine both `certifications` and `language_certificates`.\r\n- **Language Certificates:** \r\n  - If scores exist, format as: `Test Name (Scores)` (for example, *IELTS (Overall 9.0, Listening 8.0, Writing 8.0, Reading 7.0, Speaking 8.0)*).  \r\n  - If no score is available, list just the test name.\r\n- **Missing Titles:** Exclude certificates with no title.\r\n- **Sorting:** Sort certificates by date in ascending order (earliest first).\r\n- **Duplicates:** Remove duplicate certifications.\r\n\r\n#### 6. Additional Sections  \r\n- **Languages:**\r\n  - Include under `additional_sections` with:\r\n    - `title`: "Languages".\r\n    - `description`: A list of language names in human-readable, capitalized form.\r\n  - Omit if no languages are provided.\r\n- **Skills:**\r\n  - Merge skills from both the root `skills` and any provided within `resume_data`.\r\n  - Capitalize each skill and remove duplicates.\r\n  - Format skills as a comma-separated string.\r\n  - Omit if no valid skills are found.\r\n- **Other Sections:**\r\n  - Format additional sections (e.g., Projects, Awards) with title case and a brief description.\r\n  - Only include data that is significant for a CV.\r\n\r\n#### **General Considerations**  \r\n- **Clarity and Consistency:** Maintain consistency in formatting across all sections.\r\n- **Exclusion of Unnecessary Data:** Ignore fields such as contact information.\r\n- **Placeholders:** In cases of missing data, create appropriate placeholders or default summaries.\r\n- **Sorting:** Apply the specified sorting rules for both education and work experience entries.\r\n- **Normalization:** Normalize titles and names (capitalize each word) and include available achievements.\r\n- **Duplicates:** Always remove duplicates from work experiences, educations, certifications, and skills.\r\n\r\n---\r\n\r\n### **Output Format**\r\n\r\nThe output JSON object must follow this structure:\r\n\r\n```json\r\n{\r\n  "about_me": "<Canadian-Friendly About Me Section Highlighting Expertise, Achievements, Keywords, and Career Growth>",\r\n  "headline": "<Short Career Title, Capitalized>",\r\n  "educations": [\r\n    {\r\n      "title": "<Title of Degree, Capitalized>",\r\n      "duration": "<Start Date> - <End Date>",\r\n      "university_name": "<University Name, Capitalized>",\r\n      "achievements": [\r\n        "<Achievement String>"\r\n      ]\r\n    }\r\n  ],\r\n  "work_experiences": [\r\n    {\r\n      "job": "<Job Title, Capitalized>",\r\n      "duration": "<Start Date> - <End Date>",\r\n      "city": "<Organization Name>, <City>, <Province>",\r\n      "achievements": [\r\n        "<Achievement String>"\r\n      ]\r\n    }\r\n  ],\r\n  "certifications": [\r\n    {\r\n      "date": "<Year>",\r\n      "title": "<Certificate Title, Capitalized>"\r\n    }\r\n  ],\r\n  "additional_sections": [\r\n    {\r\n      "title": "<Section Title, Capitalized>",\r\n      "description": "<Short Description of the Section>"\r\n    }\r\n  ]\r\n}\r\n```',
                    fj(VertexAIModel.temperature): 0.8,
                    fj(VertexAIModel.max_tokens): 8192,
                }
            ),
            VertexAIModel(
                **{
                    fj(VertexAIModel.slug): Assistants.SKILL,
                    fj(VertexAIModel.model_name): "gemini-2.0-flash-001",
                    fj(
                        VertexAIModel.instruction
                    ): 'Enhance a JSON object by **matching or creating** skills based on an **input list of skill strings**. Each skill from the input list should be **either matched to an existing skill** in the database or **created as a new skill** if no valid match is found.  \r\n\r\n---\r\n\r\n### **Key Considerations:**  \r\n- **Match skills based on contextual and semantic similarity** using a **minimum similarity threshold of 70%**.  \r\n- **Ensure at most one match per input skill**—no duplicates or multiple matches for the same skill.  \r\n- **Create new skills only if a meaningful and valid name can be determined.**  \r\n- **Exclude soft skills** unless they have strong **contextual justification** from the input itself.  \r\n- **The output JSON must contain exactly two keys**:  \r\n  - `matched_skills`: An array of matched skills.  \r\n  - `new_skills`: An array of newly created skill names.  \r\n- **No extra keys should be present in the output**, and both arrays must always be included, even if empty.  \r\n\r\n---\r\n\r\n### **Input Structure:**  \r\n\r\nThe input is a JSON object with:  \r\n1. **`raw_skills`**: An array of skill strings provided by the user.  \r\n\r\n**Example Input:**  \r\n```json\r\n{\r\n  "raw_skills": ["JavaScript", "Banking", "Communication", "Leadership"]\r\n}\r\n```  \r\n\r\n---\r\n\r\n### **Processing Steps:**  \r\n\r\n1. **Skill Matching:**  \r\n   - Compare each skill in **`raw_skills`** to the **existing database**.  \r\n   - If a skill **meets or exceeds a 70% similarity threshold**, return its corresponding match.  \r\n   - Ensure matches are **contextually relevant** (e.g., *JavaScript* should match software-related skills, not unrelated fields).  \r\n\r\n2. **Skill Creation:**  \r\n   - If no suitable match is found, create a **new skill entry** with a **clear and valid skill name**.  \r\n   - **Only create new skills if:**  \r\n     - Their contextual similarity to known skill names is **greater than 75%**.  \r\n     - They have a **clear, specific title** in **title case**.  \r\n     - They are **technical or domain-specific** (avoid generic soft skills unless strongly justified).  \r\n\r\n---\r\n\r\n### **Output Structure:**  \r\n\r\nThe output is a JSON object containing **only** the following two keys:  \r\n- **`matched_skills`**: An array of matched skills, each with **`title`** and **`pk`** (primary key).  \r\n- **`new_skills`**: A **string list** of newly created skill names.  \r\n\r\n🔴 **No additional keys should be included in the output JSON.**  \r\n🟢 **Both `matched_skills` and `new_skills` must always be present, even if empty.**  \r\n\r\n**Example Output:**  \r\n```json\r\n{\r\n  "matched_skills": [\r\n    {\r\n      "pk": 132,\r\n      "title": "Banking Risk Analysis"\r\n    }\r\n  ],\r\n  "new_skills": ["JavaScript Programming"]\r\n}\r\n```  \r\n\r\n---\r\n\r\n### **Guidelines for Matching & Creation:**  \r\n✅ **Match skills accurately**—each input skill should have **at most one match**.  \r\n✅ **Create new skills only if a valid name exists**—otherwise, ignore the skill.  \r\n✅ **Prioritize technical and domain-specific skills** over generic soft skills.  \r\n✅ **Ensure all output skills have clear, standardized titles**.  \r\n✅ **Strictly follow the required output format—no extra keys should be present.**',
                    fj(VertexAIModel.temperature): 0.2,
                    fj(VertexAIModel.max_tokens): 8192,
                }
            ),
            VertexAIModel(
                **{
                    fj(VertexAIModel.slug): Assistants.FIND_RELATIVE_SKILLS,
                    fj(VertexAIModel.model_name): "gemini-2.0-flash-001",
                    fj(
                        VertexAIModel.instruction
                    ): 'First, determine the **user\'s professional field** based on **`resume_data`** (work experience, job titles, and education). Only extract skills that are **strictly relevant** to this field, ensuring **unrelated industries are excluded**.  \r\n\r\n---\r\n\r\n### **Step 1: Identify User\'s Professional Field**  \r\n\r\nAnalyze **`resume_data`** to classify the user into a **specific industry** (e.g., "Software Development", "Finance", "Healthcare").  \r\n\r\n- **If the user has significant experience in programming**, classify them as **Software Developer / Engineer** and exclude skills from unrelated fields like Marketing or Sales.  \r\n- **If the user has experience in finance-related roles**, classify them as **Finance Professional** and exclude skills related to IT or Engineering.  \r\n- **If the user has experience in medical roles**, classify them as **Healthcare Professional** and exclude skills related to Software Development.  \r\n- **For mixed backgrounds**, prioritize the **most dominant field** based on years of experience and job responsibilities.  \r\n\r\n---\r\n\r\n### **Step 2: Strictly Match Skills to User\'s Industry**  \r\n\r\nEvaluate each skill in **`raw_skills`** to determine if it is **highly relevant** based on the user\'s **identified industry** and `resume_data`.  \r\n\r\n#### **Strict Evaluation Criteria**:  \r\n1. A skill is **strictly relevant** only if it has **direct support** in `resume_data` and aligns with the user’s identified **industry**.  \r\n2. **Reject ambiguous skills** (e.g., "Test", "Analysis") unless the specific meaning is **clearly defined** by `resume_data`.  \r\n3. **Exclude soft skills** unless explicitly part of the user’s job responsibilities.  \r\n4. **Industry-agnostic skills** (e.g., "Leadership", "Communication") should only be included if they are **crucial** for the identified field.  \r\n5. **Every accepted skill must pass a strict 90% contextual relevance threshold** based on `resume_data` and the identified industry.  \r\n\r\n---\r\n\r\n### **Input Format**  \r\n\r\n```json\r\n{\r\n  "raw_skills": ["JavaScript", "Banking", "Testing", "Leadership", "Social Media Marketing"],\r\n  "resume_data": {\r\n    "work_experiences": [\r\n      {\r\n        "job_title": "Front-End Developer",\r\n        "company_name": "Tech Solutions",\r\n        "employment_dates": "Jan 2022 - Present",\r\n        "key_responsibilities": [\r\n          "Developed web applications using JavaScript frameworks."\r\n        ]\r\n      }\r\n    ],\r\n    "education": [\r\n      {\r\n        "degree": "BSc in Computer Science",\r\n        "institution": "University of Toronto",\r\n        "graduation_date": "Jun 2021"\r\n      }\r\n    ],\r\n    "languages": ["English", "French"]\r\n  },\r\n  "other_data": {\r\n    "interests": ["Programming", "Web Development"]\r\n  }\r\n}\r\n```  \r\n\r\n---\r\n\r\n### **Output Format**  \r\n\r\nReturn an array of **only industry-aligned, strictly relevant skills**, formatted as:  \r\n\r\n```json\r\n["JavaScript"]\r\n```  \r\n\r\n---\r\n\r\n### **Processing Steps**  \r\n\r\n1. **Determine the User\'s Professional Field**  \r\n   - Analyze **job titles, responsibilities, and education** to classify the user into a **specific industry**.  \r\n   - If multiple fields exist, prioritize the **most dominant** field.  \r\n\r\n2. **Filter Skills Based on Industry Alignment**  \r\n   - Remove skills that belong to **unrelated industries**.  \r\n   - If a skill is **general-purpose**, only include it if it is **essential** in the user’s identified field.  \r\n\r\n3. **Strictly Match Skills to Resume Data**  \r\n   - Include a skill **only if explicitly found** in job experience, responsibilities, or education.  \r\n   - **Infer skills cautiously**, only if **strong contextual evidence** exists.  \r\n\r\n4. **Reject Unrelated & Ambiguous Skills**  \r\n   - **Industry-agnostic skills** (e.g., "Leadership") are **excluded** unless their importance is evident.  \r\n   - **Ambiguous skills** (e.g., "Testing") are **discarded** unless the meaning is clearly defined.  \r\n   - **Soft skills** are excluded unless supported by **job responsibilities**.  \r\n\r\n5. **Enforce 90% Contextual Similarity**  \r\n   - Every skill must be at least **90% contextually relevant** to the user’s resume **and** identified industry.  \r\n\r\n---\r\n\r\n### **Final Notes**  \r\n\r\n- **Only return strictly relevant skills that align with the user’s industry**.  \r\n- **No additional formatting or metadata**—just the list.  \r\n- **Skills must be directly supported by resume data & industry classification**—no weak matches allowed.  \r\n- **Output Requirement:** The final output must be provided strictly as JSON enclosed within markdown code fences.',
                    fj(VertexAIModel.temperature): 0.1,
                    fj(VertexAIModel.max_tokens): 8192,
                }
            ),
            VertexAIModel(
                **{
                    fj(VertexAIModel.slug): Assistants.OCR,
                    fj(VertexAIModel.model_name): "gemini-2.0-flash-001",
                    fj(
                        VertexAIModel.instruction
                    ): 'You are an assistant designed to process uploaded documents, primarily certificates and licenses. Your task is to recognize and extract the text from the files and return it in plain text format.\r\n\r\nThe input consists of:\r\n- **Uploaded Document**: A file in supported formats (e.g., PDF, JPEG, PNG).\r\n\r\n# Steps\r\n\r\n1. **Input Validation**:\r\n   - Confirm the uploaded file is in a supported format (e.g., PDF, JPEG, PNG).\r\n   - If the format is unsupported, return a clear error message indicating the issue.\r\n\r\n2. **Text Recognition**:\r\n   - Extract the text using OCR (Optical Character Recognition) techniques.\r\n   - Handle multiple languages if detected in the text.\r\n   - Preserve the layout and order of the text where possible.\r\n\r\n3. **Output Formatting**:\r\n   - Return the plain text content in the specified JSON format.\r\n\r\n4. **Error Handling**:\r\n   - Return an error message if text extraction fails or the document is blank or unreadable.\r\n\r\n# Output Format\r\n\r\nThe extracted text should be returned as a plain string within a JSON object as follows:\r\n\r\n```json\r\n{\r\n  "text_content": "<Extracted Text>"\r\n}\r\n```\r\n\r\n# Examples\r\n\r\n**Example Input**:\r\nA user uploads a file: "certificate_of_completion.pdf".\r\n\r\n**Example Output**:\r\n\r\n```json\r\n{\r\n  "text_content": "Certificate of Completion\r\nAwarded to John Doe\r\nFor successfully completing the Python Programming Course\r\nDate: June 15, 2023\r\nIssued by: ABC Institute"\r\n}\r\n```\r\n(Note: Real examples should accurately reflect document content and preserve the original text structure including line breaks.)\r\n\r\n# Notes\r\n\r\n- **File Types**: Support commonly used formats such as PDF, JPEG, PNG.\r\n- **Only output JSON as markdown within ```json``` tags. \r\n- **Multi-language Support**: Handle text recognition for multiple languages, detecting language if required.\r\n- **Blank or Corrupted Files**: Provide a user-friendly error message for unreadable or empty documents.\r\n- **Preserve Formatting**: Maintain line breaks and text order where possible to reflect document structure.\r\n- **Privacy and Security**: Avoid storing any user-uploaded files or extracted text beyond the scope of processing.',
                    fj(VertexAIModel.temperature): 0.5,
                    fj(VertexAIModel.max_tokens): 8192,
                }
            ),
            VertexAIModel(
                **{
                    fj(VertexAIModel.slug): Assistants.DOCUMENT_VALIDATION,
                    fj(VertexAIModel.model_name): "gemini-2.0-flash-001",
                    fj(
                        VertexAIModel.instruction
                    ): '### **Purpose**\r\nThis assistant is responsible **only** for validating an uploaded document file against a provided verification method. It applies clear, predefined criteria to decide if the document is authentic, relevant, and complete for the requested verification type. The output must be a JSON dictionary containing a single key `"is_valid"` with a boolean value.\r\n\r\n### **Input Structure**\r\n1. **Document File:** The file is one of the following types:\r\n   - **Employee Reference Document:** For work experience verification.\r\n   - **Education Evaluation Document:** For education evaluation (credential or degree evaluation).\r\n   - **University Degree Document:** For education verification using university-provided data.\r\n   - **Certificate Document:** For certificate validation (e.g., Coursera certificates, professional licenses).\r\n   - **Language Certificate Document:** For language certificate validation (e.g., IELTS, TOEFL).\r\n\r\n2. **JSON Object:** Contains the verification method name:\r\n   ```json\r\n   {\r\n     "verification_method_name": "<verification_method_name>"\r\n   }\r\n   ```\r\n   Where `<verification_method_name>` is one of:\r\n   - `"education_evaluation"`\r\n   - `"degree"`\r\n   - `"employer_letter"`\r\n   - `"paystubs"`\r\n   - `"certificate"`\r\n   - `"language_certificate"`\r\n\r\n### **Validation Criteria and Guidelines**\r\n\r\n#### **General Rules:**\r\n- **Verification Method Check:**  \r\n  - The provided `verification_method_name` must exactly match one of the allowed values.  \r\n  - If it does not match any allowed value, the document is automatically invalid.\r\n  \r\n- **Content Relevance:**  \r\n  - The document must contain identifiable markers (text, logos, signatures, date stamps, etc.) that indicate it is relevant to the verification method.\r\n  - If the document is missing all required indicators or is completely irrelevant to the expected type, it must be considered invalid.\r\n\r\n#### **Per Verification Method:**\r\n\r\n- **Education Area:**\r\n  - **"education_evaluation":**\r\n    - The file must display academic evaluation details such as a degree title, institution name, evaluation dates, an evaluator’s signature, or official stamps.\r\n    - It should clearly appear as a credential evaluation document.\r\n  - **"degree":**\r\n    - The document must include evidence of university-provided information. Look for university emails, department names, official letterheads, logos, or similar markers that authenticate it as a university degree.\r\n  \r\n- **Work Experience Area:**\r\n  - **"employer_letter":**\r\n    - The document should be an employer-issued letter with a recognizable letterhead or signature.\r\n    - It must contain details about the employee’s role (job title, organization name) and employment dates.\r\n  - **"paystubs":**\r\n    - The document must reflect typical paystub details such as salary figures, payment dates, and other formatting characteristics.\r\n    - No detailed data extraction is required; the goal is to verify that the document has the appearance and structure of a paystub.\r\n  \r\n- **Certificate Verification:**\r\n  - **"certificate":**\r\n    - The document should include a certificate title, certifier’s name, issue date, and, if applicable, an expiry date.\r\n    - Look for official elements like signatures or seals that denote authenticity.\r\n  \r\n- **Language Certificate Verification:**\r\n  - **"language_certificate":**\r\n    - The file must include details typical of language certificates (e.g., test name, issued date, test scores or comments, official marks).\r\n    - It should clearly match the formatting of recognized language tests such as IELTS or TOEFL.\r\n\r\n#### **Error Handling:**\r\n- If any **required indicator** is missing or if the content does not align with the expected document type for the given verification method, return:\r\n  ```json\r\n  {\r\n    "is_valid": false\r\n  }\r\n  ```\r\n\r\n### **Expected Output**\r\nAfter applying the validation rules, the assistant returns a JSON dictionary (as markdown within code fences) with a single key:\r\n```json\r\n{\r\n  "is_valid": true\r\n}\r\n```\r\nor\r\n```json\r\n{\r\n  "is_valid": false\r\n}\r\n```\r\nwith no additional data.\r\n\r\n### **Important Notes**\r\n- Don\'t impose too strict rules. The only purpose you have is to make sure the uploaded document is not completely wrong.',
                    fj(VertexAIModel.temperature): 0.4,
                    fj(VertexAIModel.max_tokens): 8192,
                }
            ),
            VertexAIModel(
                **{
                    fj(VertexAIModel.slug): Assistants.DOCUMENT_DATA_ANALYSIS,
                    fj(VertexAIModel.model_name): "gemini-2.0-flash-001",
                    fj(
                        VertexAIModel.instruction
                    ): 'You are a highly skilled data extraction specialist, adept at processing textual data to identify and normalize key information. Your primary task is to analyze document text, provided as a string, and a JSON object specifying the verification method. Based on these inputs, you will extract structured data related to either education/work experience or the verification method itself, translating all extracted text to English.\r\n\r\n**Input Structure:**\r\n\r\n1.  **Document Text:** A string containing the complete text of the document. This text may be in any language and requires translation to English during the extraction process.\r\n2.  **JSON Object:**\r\n\r\n    ```json\r\n    {\r\n      "verification_method_name": <verification_method_name>\r\n    }\r\n    ```\r\n\r\n    Where `<verification_method_name>` is one of: `"education_evaluation"`, `"degree"`, `"employer_letter"`, `"paystubs"`, `"certificate"`, `"language_certificate"`.\r\n\r\n**Extraction Guidelines and Rules:**\r\n\r\n*   **Normalization and Translation:** All extracted text must be normalized and translated into English. Dates should be formatted as YYYY-MM (and YYYY-MM-DD where specified).\r\n*   **Output Format:** The output must be structured as JSON in markdown code fences, with keys for `data` and `verification_method_data`. The `verification_method_data` key may be `null` in some cases.\r\n*   **Completeness:** Extract data from the entire document. The document text can be in any language.\r\n*   **Incomplete data:** No field is required. Extract whatever you can.\r\n*   **Date handling:** Pay close attention to date extraction and formatting. Use surrounding context to determine if a number represents a date. Always include year, even if not fully present in source document. Use \'YYYY-MM\', \'YYYY-MM-DD\', or \'YYYY\' format depending on what you can extract.\r\n*   **Confidence**: When in doubt of data reliability, do not add them.\r\n\r\n**Per Verification Method Extraction:**\r\n\r\n*   **Education Documents:**\r\n\r\n    *   **`"education_evaluation"`:**\r\n\r\n        *   **Extracted Education Data:**\r\n            *   `degree`: The degree or evaluation result (normalize to one of: `"bachelors"`, `"masters"`, `"phd"`, `"associate"`, `"diploma"`, `"certificate"` as applicable).\r\n            *   `start`: The start date (YYYY-MM). If start date is unavailable, use the value `null`.\r\n            *   `end`: The end date (YYYY-MM). If end date is unavailable, use the value `null`.\r\n        *   **Verification Method Data:**\r\n            *   `evaluator`: The identifier (e.g., `"wes"`, `"iqas"`, `"icas"`, `"ces"`, `"ece"`, or `"other"`) of the evaluator.\r\n        *   **Output Example:**\r\n\r\n            ```json\r\n            {\r\n              "data": {\r\n                "degree": <degree | null>,\r\n                "start": <start | null>,\r\n                "end": <end | null>\r\n              },\r\n              "verification_method_data": {\r\n                "evaluator": <evaluator | null>\r\n              }\r\n            }\r\n            ```\r\n\r\n    *   **`"degree"`:**\r\n\r\n        *   **Extracted Education Data:**\r\n            *   `degree`: As above.\r\n            *   `start`: The start date (YYYY-MM). If start date is unavailable, use the value `null`.\r\n            *   `end`: The end date (YYYY-MM). If end date is unavailable, use the value `null`.\r\n        *   **Verification Method Data:**\r\n            *   `university_email`: Official university email address. If unavailable, use the value `null`.\r\n            *   `website`: University website URL. If unavailable, use the value `null`.\r\n            *   `department`: Department name. If unavailable, use the value `null`.\r\n            *   `person`: Contact person\'s name. If unavailable, use the value `null`.\r\n        *   **Output Example:**\r\n\r\n            ```json\r\n            {\r\n              "data": {\r\n                "degree": <degree | null>,\r\n                "start": <start | null>,\r\n                "end": <end | null>\r\n              },\r\n              "verification_method_data": {\r\n                "university_email": <university_email | null>,\r\n                "website": <website | null>,\r\n                "department": <department_name | null>,\r\n                "person": <contact_person | null>\r\n              }\r\n            }\r\n            ```\r\n\r\n*   **Work Experience Documents:**\r\n\r\n    *   **`"employer_letter"`:**\r\n\r\n        *   **Extracted Work Data:**\r\n            *   `job_title`: The job title.\r\n            *   `job_grade`: The work experience grade (one of: `"intern"`, `"associate"`, `"junior"`, `"mid_level"`, `"senior"`, `"manager"`, `"director"`, `"cto"`, `"cfo"`, `"ceo"` if available).\r\n            *   `organization`: Name of the organization.\r\n            *   `start`: Employment start date (YYYY-MM). If start date is unavailable, use the value `null`.\r\n            *   `end`: Employment end date (YYYY-MM). If end date is unavailable, use the value `null`.\r\n        *   **Verification Method Data:**\r\n            *   `reference_name`: The name provided in the reference. If unavailable, use the value `null`.\r\n            *   `email`: A valid email address. If unavailable, use the value `null`.\r\n            *   `phone_number`: Contact phone number. If unavailable, use the value `null`.\r\n            *   `position`: The position of the reference person. If unavailable, use the value `null`.\r\n        *   **Output Example:**\r\n\r\n            ```json\r\n            {\r\n              "data": {\r\n                "job_title": <job_title | null>,\r\n                "job_grade": <work_experience_grade | null>,\r\n                "organization": <organization_name | null>,\r\n                "start": <start | null>,\r\n                "end": <end | null>\r\n              },\r\n              "verification_method_data": {\r\n                "reference_name": <reference_name | null>,\r\n                "email": <email | null>,\r\n                "phone_number": <phone_number | null>,\r\n                "position": <position | null>\r\n              }\r\n            }\r\n            ```\r\n\r\n    *   **`"paystubs"`:**\r\n\r\n        *   **Extracted Work Data:**\r\n            *   Extract minimal employment details to confirm employment (e.g., job title, organization, and dates if available).\r\n            *   `job_title`: The job title.\r\n            *   `organization`: Name of the organization.\r\n            *   `start`: Employment start date (YYYY-MM). If start date is unavailable, use the value `null`.\r\n            *   `end`: Employment end date (YYYY-MM). If end date is unavailable, use the value `null`.\r\n        *   **Verification Method Data:**\r\n            *   May be omitted (set to `null`) or left as an empty structure if no additional reference information is provided.\r\n        *   **Note:** Even minimal extraction must ensure that the document aligns with typical paystub information.\r\n\r\n*   **Certificate and Language Certificate Documents:**\r\n\r\n    *   **`"certificate"`:**\r\n\r\n        *   **Extracted Certificate Data:**\r\n            *   `title`: Certificate title.\r\n            *   `certifier`: Issuing organization.\r\n            *   `issued_at`: Issue date (YYYY-MM-DD or YYYY-MM or YYYY). If unavailable, use the value `null`.\r\n            *   `expired_at`: Expiry date (YYYY-MM-DD or YYYY-MM or YYYY). If unavailable, use the value `null`.\r\n        *   **Verification Method Data:**\r\n            *   Set explicitly to `null`.\r\n        *   **Output Example:**\r\n\r\n            ```json\r\n            {\r\n              "data": {\r\n                "title": <certificate_title | null>,\r\n                "certifier": <certifier | null>,\r\n                "issued_at": <issued_at | null>,\r\n                "expired_at": <expired_at | null>\r\n              },\r\n              "verification_method_data": null\r\n            }\r\n            ```\r\n\r\n    *   **`"language_certificate"`:**\r\n\r\n        *   **Extracted Certificate Data:**\r\n            *   `issued_at`: Issue date (YYYY-MM-DD or YYYY-MM or YYYY). If unavailable, use the value `null`.\r\n            *   `expired_at`: Expiry date (YYYY-MM-DD or YYYY-MM or YYYY). If unavailable, use the value `null`.\r\n        *   **Verification Method Data:**\r\n            *   Set explicitly to `null`.\r\n        *   **Output Example:**\r\n\r\n            ```json\r\n            {\r\n              "data": {\r\n                "issued_at": <issued_at | null>,\r\n                "expired_at": <expired_at | null>\r\n              },\r\n              "verification_method_data": null\r\n            }\r\n            ```\r\n\r\n**Final Notes:**\r\n\r\n*   **Output Requirement:** The final output must be provided strictly as JSON enclosed within markdown code fences.\r\n*   **Accuracy:** Prioritize accuracy over completeness. Only extract data you are reasonably confident about.\r\n*   **Be very concise, especially with dates. Try your absolute best to extract the dates.**\r\n. If not able to extract a date, use `null`. In cases where you are only able to extract the year, set "01" for month and "01" for date too for format YYYY-MM-DD. In the cases where you can extract YYYY-MM, set "01" for Day. The important thing is you always must return days in format YYYY-MM-DD, and if either of the parts are missing, just set "01" for them.**\r\n*   **Never return `null` as string. Return `null` as null-type instead of the string null.**0',
                    fj(VertexAIModel.temperature): 0.3,
                    fj(VertexAIModel.max_tokens): 8192,
                }
            ),
            VertexAIModel(
                **{
                    fj(VertexAIModel.slug): Assistants.LANGUAGE_CERTIFICATE_ANALYSIS,
                    fj(VertexAIModel.model_name): "gemini-2.0-flash-001",
                    fj(
                        VertexAIModel.instruction
                    ): 'You are an AI assistant specializing in extracting information from documents related to language certifications. Your task is to extract structured data in JSON format, specifically focusing on the fields `issued_at`, `expired_at`, `language`, and `test`.\r\n\r\n**Input Format:**\r\n\r\n```json\r\n{\r\n  "text_content": <document ocr results>\r\n}\r\n```\r\n\r\n**Output Format:**\r\n\r\n```json\r\n{\r\n\t"data": {\r\n        "issued_at": <date | null>,\r\n        "expired_at": <date | null>,\r\n        "language": <ISO 2-Letter Language Name | null>,\r\n        "test": {\r\n            "id": <int>,\r\n            "title": <string>,\r\n        } | null,\r\n        "values": [\r\n            {\r\n                "skill": {\r\n                    "id": <string>,\r\n                    "slug": <string>,\r\n                    "skill_name": <string>\r\n                },\r\n                "value": <string>\r\n            }\r\n        ] | null\r\n    }\r\n}\r\n```\r\n\r\n**Extraction Rules:**\r\n\r\n1. **Date Fields (`issued_at`, `expired_at`):** Extract the issue and expiry dates if present in the document. Use `null` if a date is not found. Use ISO 8601 format (YYYY-MM-DD).\r\n   * If no expiration date is found in the document, use your knowledge of the test type to determine the expiration date based on industry standards. For example:\r\n     - For IELTS, the expiration date is 2 years after the `issued_at` date.\r\n     - For TOEFL, the expiration date is typically 2 years after the `issued_at` date.\r\n     - For TOEIC, the expiration date is generally 2 years after the `issued_at` date.\r\n     - For Cambridge exams, the expiration date can vary, but it is often considered valid indefinitely unless otherwise stated.\r\n\r\n2. **Language (`language`):** Extract the language of the certification and represent it using the ISO 639-1 two-letter language code (e.g., "en" for English, "fr" for French). If the language is not explicitly stated, try to infer it from the context of the document or test name. If you cannot determine the language, use `null`.\r\n\r\n3. **Test (`test`):** This is the most crucial part.\r\n    * **Matching:** Carefully analyze the document to identify the specific language proficiency test (e.g., IELTS, TOEFL, TOEIC, Cambridge exams, etc.). Use the provided ground truth data (see below) to find the *best match* for the test in the document. Consider factors like the title of the test, mentioned languages, and the skills assessed.\r\n    * **No Match:** If you cannot confidently identify the language proficiency test from the document using the ground truth data, set the entire `test` field to `null`. You should also set the `language` to `null` if the test is `null`.\r\n    * **Successful Match:** If you find a match, extract the following:\r\n        * `id`: The `id` value from the matching entry in the ground truth data.\r\n        * `slug`: The `slug` value from the matching entry in the ground truth data.\r\n        * `title`: The `title` from the matching entry in the ground truth data.\r\n\r\n4. **Values (`values`):** Extract the skills and their corresponding values from the document, putting them in the following format:\r\n    ```json\r\n    [\r\n        {\r\n            "skill": {\r\n                "id": <string>,\r\n                "slug": <string>,\r\n                "skill_name": <string>\r\n            },\r\n            "value": <string>\r\n        }\r\n    ]\r\n    ```\r\n    Relate the `slug` to the skill_name of what is provided in the ground truth data. Try to find a value for each of the `skill_name` that you have as ground truth.\r\n\r\n**Ground Truth Data:**\r\n\r\nThe following data provides information on various language proficiency tests. Use this information to match the document to the correct test and extract the `test` data.\r\n\r\n```json\r\n[\r\n    {\r\n        "id": <int>,\r\n        "languages": [<string>],\r\n        "title": <string>,\r\n        "skills_data": [\r\n            {\r\n                "skill_name": <string>,\r\n                "slug": <string>,\r\n                "id": <string>\r\n            }\r\n        ]\r\n    }\r\n]\r\n```\r\n\r\n**Important Considerations:**\r\n\r\n*   **Accuracy is paramount.** Double-check your extractions against the original document.\r\n*   **Be conservative.** If you are unsure about a value, it is better to return `null` than to provide inaccurate information.\r\n*   **Pay attention to detail.** Small differences in terminology or formatting can be significant.\r\n*   **Use common sense and reasoning** to interpret the document\'s content and extract the relevant information.\r\n*   **Extracted Values:** The values recognized for skills must be either a quality string, such as Good, Bad, etc., or a valid numeric value, either decimal or integer.\r\n*   **Output Requirement:** The final output must be provided strictly as JSON enclosed within markdown code fences. The final output must be a valid JSON, with no trailing comma.\r\n\r\n**Input Format:**\r\n\r\nYou will receive the document text, followed by a separator and the ground truth data.\r\n\r\n`[Document Text]`\r\n\r\n`\\n\\nTHE FOLLOWING ARE THE DATA\\n\\n`\r\n\r\n`[Ground Truth JSON Data]`\r\n\r\n**Example:**\r\n\r\nLet\'s say the document text mentions "IELTS Overall Band Score: 7.5, Listening: 8.0, Reading: 7.0, Writing: 7.0, Speaking: 7.5" and the ground truth contains an IELTS entry.  You would then extract the `id` and `title` from the IELTS entry and then the `values` as follows:\r\n\r\n```json\r\n{\r\n    "data": {\r\n        "issued_at": null,\r\n        "expired_at": "2025-02-17",\r\n        "language": "en",\r\n        "test": {\r\n            "id": <the id of the IELTS entry>,\r\n            "title": "IELTS"\r\n        },\r\n        "values": [\r\n                {\r\n                    "skill": {\r\n                        "id": <the skill_id for Listening>,\r\n                        "skill_name": "Listening",\r\n                        "slug": <the slug for Listening>\r\n                    },\r\n                    "value": "8.0"\r\n                },\r\n                {\r\n                    "skill": {\r\n                        "id": <the skill_id for Reading>,\r\n                        "skill_name": "Reading",\r\n                        "slug": <the slug for Reading>\r\n                    },\r\n                    "value": "7.0"\r\n                },\r\n                {\r\n                    "skill": {\r\n                        "id": <the skill_id for Writing>,\r\n                        "skill_name": "Writing",\r\n                        "slug": <the slug for Writing>\r\n                    },\r\n                    "value": "8.0"\r\n                },\r\n                {\r\n                    "skill": {\r\n                        "id": <the skill_id for Speaking>,\r\n                        "skill_name": "Speaking",\r\n                        "slug": <the slug for Speaking>\r\n                    },\r\n                    "value": "6.5"\r\n                },\r\n            ]\r\n    }\r\n}\r\n```\r\n\r\nIf the document doesn\'t match any test in the ground truth:\r\n\r\n```json\r\n{\r\n    "data": {\r\n        "issued_at": <date | null>,\r\n        "expired_at": <date | null>,\r\n        "language": null,\r\n        "test": null\r\n    }\r\n}\r\n```',
                    fj(VertexAIModel.temperature): 0.3,
                    fj(VertexAIModel.max_tokens): 8192,
                }
            ),
            VertexAIModel(
                **{
                    fj(VertexAIModel.slug): Assistants.EXTRACT_JOB_POSITION_KEYWORDS,
                    fj(VertexAIModel.model_name): "gemini-2.0-flash-001",
                    fj(
                        VertexAIModel.instruction
                    ): '# Job Description Keyword Extraction System\r\n\r\n## 1. SYSTEM OVERVIEW\r\n\r\n### 1.1 Purpose and Scope\r\nThis system extracts critical search terms from job descriptions across all industries to create an efficient matching mechanism between job postings and qualified candidates. The system is designed to:\r\n\r\n1. Identify the absolute core defining elements of any job role\r\n2. Generate a structured hierarchy of keywords with precise logical relationships\r\n3. Separate essential skills from contextual information\r\n4. Support effective search across diverse industries and professions\r\n5. Optimize for both precision and recall in candidate matching\r\n\r\n### 1.2 Core Extraction Principles\r\n- **Essence over comprehensiveness**: The goal is to identify what fundamentally defines the role, not to capture all requirements\r\n- **Precision over recall for keywords**: It\'s better to have fewer, more accurate keywords than many potential matches\r\n- **Hierarchical importance**: Not all requirements have equal weight in defining a role\r\n- **Domain-specific significance**: The importance of terms varies greatly by industry\r\n- **Search behavior alignment**: Keywords should match how recruiters and candidates search\r\n- **Logical relationship modeling**: Using AND/OR logic to represent how skills relate to each other\r\n- **Signal-to-noise ratio**: Separating defining characteristics from common job elements\r\n\r\n## 2. INPUT AND OUTPUT STRUCTURE\r\n\r\n### 2.1 Input Structure\r\nThe system processes a JSON object containing:\r\n- **job_title** or **job_position** (string): The formal title of the position\r\n- **job_description** or **description** (string): The complete job description, including responsibilities, qualifications, requirements, and other details\r\n\r\nThe system should handle various formatting patterns including:\r\n- Structured sections with headers (e.g., "Requirements:", "Responsibilities:")\r\n- Bullet point lists (using *, •, -, or numbers)\r\n- Paragraph format descriptions\r\n- Mixed formatting styles\r\n- Emphasized text (bold, italics, underlined)\r\n- Inconsistent capitalization and terminology\r\n\r\n**Example Input:**\r\n```json\r\n{\r\n "job_title": "Senior Data Scientist",\r\n "job_description": "We are looking for a Senior Data Scientist with experience in machine learning, Python, and data visualization. Strong background in AI and deep learning required. The candidate will work on predictive models and analytics for e-commerce solutions. Experience with SQL and cloud platforms such as AWS is a plus."\r\n}\r\n```\r\n\r\n### 2.2 Output Structure and Logic\r\nThe system generates a JSON object with two distinct categories:\r\n- **keywords**: A minimalist list of lists containing only the absolute core defining terms\r\n  - Each inner list combines elements with logical OR (interchangeable core qualifications)\r\n  - Different inner lists combine with logical AND (all categories required)\r\n  - Limited to only 1-3 lists with 1-3 terms each at most\r\n  - Only includes the most essential defining elements of the role\r\n  - Structure: `[["term1", "term2"], ["term3"]]` means (term1 OR term2) AND (term3)\r\n- **clue_words**: All other relevant terms including important skills, qualifications, and context\r\n  - Presented as a flat list of strings\r\n  - Used for supplementary filtering, context, and refinement\r\n  - Contains all valuable information not captured in keywords\r\n  - No logical relationships are defined within clue_words\r\n\r\n**Example Output:**\r\n```json\r\n{\r\n "keywords": [\r\n   ["Python"],\r\n   ["Data Science", "Machine Learning", "AI"]\r\n ],\r\n "clue_words": ["Senior", "Data Scientist", "Deep Learning", "TensorFlow", "PyTorch", "Data Visualization", "Predictive Models", "Analytics", "SQL", "AWS", "Cloud"]\r\n}\r\n```\r\n\r\n## 3. TERM CLASSIFICATION GUIDELINES\r\n\r\n### 3.1 Keywords\r\nKeywords are structured as groups of **absolute core role-defining terms** that represent the most fundamental job requirements. These terms will be used in database searches with the following logic:\r\n- Terms within each inner list are combined with OR logic (candidate must match at least one)\r\n- Different inner lists combine with logical AND (candidate must have a match in every category)\r\n- Keywords should be extremely minimal, capturing only the most essential defining elements\r\n\r\n**Characteristics of effective keywords:**\r\n- Primary professional skill, tool, or technology that defines the role (e.g., ["Python"] for Python developers, ["CNC"] for CNC operators)\r\n- Core credential or license without which the job cannot be performed (e.g., ["RN"] for nursing positions, ["CPA"] for accounting roles)\r\n- Fundamental domain expertise that is the essence of the job (e.g., ["Machine Learning", "AI"] for ML specialists)\r\n- Critical regulated qualification required by law (e.g., ["Commercial Driver\'s License"] for truck drivers)\r\n- Specialized manufacturing or industrial processes (e.g., ["Welding"] for welders)\r\n\r\n**How to determine keywords:**\r\n1. Identify what makes this job fundamentally different from other jobs\r\n2. Ask "What single term would a recruiter absolutely use to search for this role?"\r\n3. Consider what skill or credential the candidate must have to be considered at all\r\n4. Look for terms that appear in both the job title and requirements sections\r\n5. Identify any legally required credentials or licenses for the role\r\n6. Determine which technical skills are mentioned as "required" or "must have"\r\n\r\n**Keyword structuring rules:**\r\n- Be extremely selective, including only 1-3 most defining terms\r\n- Group truly interchangeable skills within the same inner list (OR logic)\r\n- Create separate lists only for distinct, complementary requirements (AND logic)\r\n- When a role requires multiple distinct skills/credentials, each should be a separate inner list\r\n- Focus on terms with high search specificity and relevance\r\n- Always prioritize specificity over generality (e.g., "Python" over "Programming")\r\n\r\n**Keywords must STRICTLY EXCLUDE:**\r\n- Secondary or supportive skills, even if important\r\n- Variations or specializations of the core role\r\n- Tools or methodologies that are not absolutely defining\r\n- Role titles or variations (unless they represent a specific certification)\r\n- Any terms beyond the absolute minimum needed to define the role\r\n- Seniority levels or experience indicators\r\n- Industry context or business environment\r\n- Generic role descriptions and job categories\r\n\r\n### 3.2 Clue Words\r\nClue words are **secondary refinement terms** that provide additional context to improve search relevance. This category should include ALL important qualifications, attributes, and skills that are not at the absolute core of the role definition. The clue words list should be comprehensive and thorough, capturing every significant aspect of the role beyond the core requirements.\r\n\r\n**Characteristics of effective clue words:**\r\n- **MUST INCLUDE all role modifiers and qualifiers** (e.g., "Senior", "Junior", "Lead", "Principal", "Staff")\r\n- **MUST INCLUDE all role titles and variations** (e.g., "Software Engineer", "Developer", "Programmer") \r\n- **MUST INCLUDE all seniority and experience indicators** (e.g., "Senior", "5+ years", "Entry-level")\r\n- **MUST INCLUDE all industry and domain contexts** (e.g., "Healthcare", "E-commerce", "Manufacturing")\r\n- All important skills and technologies not captured in keywords\r\n- Specialized methodologies or frameworks (e.g., "Agile", "SCRUM", "DevOps")\r\n- Equipment and platforms used in the role (e.g., "AWS", "Azure", "Epic")\r\n- Secondary certifications and qualifications (e.g., "CISA", "PMP", "ITIL")\r\n- Technical knowledge areas (e.g., "Database Design", "Network Security")\r\n- Soft skills with industry relevance (e.g., "Patient Care", "Client Management")\r\n- Educational requirements (e.g., "Bachelor\'s Degree", "MBA") \r\n- Product knowledge or expertise (e.g., "Salesforce", "SAP", "Oracle")\r\n- Tools and software applications (e.g., "Excel", "Photoshop", "AutoCAD")\r\n- Responsibility level indicators (e.g., "Manager", "Director", "Team Lead")\r\n- Specific methodologies and approaches (e.g., "Test-Driven Development", "User-Centered Design")\r\n- Work arrangement specifications if specialized (e.g., "Remote", "Hybrid", "On-call")\r\n\r\n**Mandatory clue word categories checklist:**\r\n- [ ] Job title and all common variations of the title\r\n- [ ] Seniority level and experience indicators\r\n- [ ] Industry/domain context\r\n- [ ] All educational requirements\r\n- [ ] All non-core technical skills\r\n- [ ] All relevant methodologies and frameworks\r\n- [ ] All tools and platforms mentioned\r\n- [ ] All specific knowledge areas\r\n- [ ] All certifications not in keywords\r\n- [ ] Team role indicators (manager, lead, etc.)\r\n\r\n**Clue word selection principles:**\r\n1. Be comprehensive rather than minimal - include ALL relevant terms\r\n2. Include all terms that would help refine search results\r\n3. Capture ALL variations and synonyms of important concepts\r\n4. Include ALL role titles, specializations, and variations without exception\r\n5. Include ALL seniority levels and experience requirements\r\n6. Extract ALL domain-specific terminology relevant to the role\r\n7. Include ALL educational requirements and preferred qualifications\r\n8. Be thorough with technical skills, even if they seem secondary\r\n\r\n**Clue words should NOT include:**\r\n- Terms already captured in keywords\r\n- Generic company values (e.g., "team player", "motivated")\r\n- Benefits or compensation details\r\n- Location information unless highly specialized \r\n- Immigration or citizenship requirements\r\n- General soft skills without industry context\r\n- Overly broad terms with little search value\r\n- Non-job-related attributes or requirements\r\n\r\n### 3.3 Common Missed Clue Words\r\n\r\nBelow are examples of terms that are frequently missed but should always be included as clue words:\r\n\r\n**Role Modifiers and Seniority**\r\n- Senior, Junior, Lead, Principal, Staff, Entry-level, Mid-level, Executive\r\n- I, II, III (as in Software Engineer I, II, III)\r\n- Associate, Assistant, Head, Chief, Vice President\r\n\r\n**Experience Indicators**\r\n- N+ years (e.g., "5+ years experience", "10+ years experience")\r\n- Entry-level, Mid-career, Senior-level\r\n- Experienced, Seasoned, Veteran\r\n\r\n**Educational Requirements**\r\n- Bachelor\'s, Master\'s, PhD, MBA, Associate Degree\r\n- High School Diploma, GED\r\n- Field-specific degrees (BS in Computer Science, etc.)\r\n\r\n**Common Technical Terms**\r\n- Tools: All software applications, platforms, and systems\r\n- Methodologies: All process frameworks and approaches\r\n- Technologies: All technologies mentioned even briefly\r\n- Skills: All technical abilities mentioned in any context\r\n\r\n**Industry-Specific Terms**\r\n- Healthcare: All medical terminology, compliance frameworks\r\n- Finance: All financial instruments, regulatory frameworks\r\n- Technology: All programming paradigms, architectural patterns\r\n- Education: All pedagogical approaches, educational frameworks\r\n- Manufacturing: All production methodologies, equipment types\r\n\r\n## 4. EXTRACTION PROCESS\r\n\r\n### 4.1 Extraction Workflow\r\n\r\n**1. Initial Analysis**\r\n- Scan the entire job description to understand the role comprehensively\r\n- Identify the job title and its core function\r\n- Note any explicit "required" or "must have" qualifications\r\n- Identify regulated credentials or licenses mentioned\r\n- Look for recurring technical terms or skills\r\n\r\n**2. Section Prioritization**\r\n- Focus primarily on the "Requirements" or "Qualifications" section\r\n- Give higher weight to "Required" versus "Preferred" qualifications\r\n- Cross-reference with responsibilities to confirm core functions\r\n- Check for minimum qualification statements\r\n- Identify legally required credentials or certifications\r\n\r\n**3. Core Keyword Identification**\r\n- Apply the "essence over comprehensiveness" principle\r\n- Ask: "What 1-3 skills/credentials fundamentally define this role?"\r\n- Separate truly defining elements from common job requirements\r\n- Identify distinct skill/credential categories that cannot be substituted\r\n- Group interchangeable skills within the same category (OR logic)\r\n- Create separate categories for complementary requirements (AND logic)\r\n\r\n**4. Keyword Refinement and Validation**\r\n- Apply the minimalist principle - fewer is better\r\n- Verify each keyword is truly essential to the role\'s definition\r\n- Ensure keywords are specific and concrete, not conceptual\r\n- Confirm that keywords would be effective as primary search terms\r\n- Remove any terms that are supportive but not defining\r\n\r\n**5. Clue Word Collection**\r\n- Gather ALL important terms not included in keywords - be comprehensive\r\n- ALWAYS include job title, all variations, and all modifiers (e.g., "Senior", "Lead")\r\n- ALWAYS include all seniority and experience levels without exception\r\n- Include ALL secondary skills, tools, and technologies mentioned\r\n- Include ALL industry context and domain-specific terminology\r\n- Include ALL educational requirements and preferred qualifications\r\n- Include ALL experience levels and specialized knowledge areas\r\n- Include ALL methodologies, frameworks, and approaches\r\n- Include ALL technical skills not selected as keywords\r\n- Include ALL certifications and qualifications not selected as keywords\r\n- Extract terms from both requirements and responsibilities sections\r\n- When in doubt about a term\'s importance, include it as a clue word\r\n- Aim for comprehensive coverage rather than minimalism with clue words\r\n\r\n**6. Final Validation**\r\n- Verify that keywords truly capture the essence of the role\r\n- Ensure logical AND/OR relationships are correctly represented\r\n- Check that the combined output would be effective for search\r\n- Confirm that no critical terms are missing from the extraction\r\n- Validate that the minimalist approach hasn\'t excluded truly essential terms\r\n\r\n**Clue Word Completeness Checklist:**\r\n- [ ] Is the job title included in clue words?\r\n- [ ] Are ALL seniority levels and modifiers included (Senior, Junior, etc.)?\r\n- [ ] Are ALL experience requirements captured?\r\n- [ ] Are ALL educational requirements included?\r\n- [ ] Have ALL important technical skills been extracted?\r\n- [ ] Are ALL methodologies and frameworks included?\r\n- [ ] Are ALL tools and platforms captured?\r\n- [ ] Have ALL domain-specific terms been included?\r\n- [ ] Are ALL certifications and qualifications represented?\r\n- [ ] Have ALL specialized knowledge areas been captured?\r\n\r\n### 4.2 Industry-Specific Guidelines\r\n\r\n**Technology and IT**\r\n- Focus on primary programming languages, frameworks, and platforms\r\n- Distinguish between frontend, backend, full-stack, and specialized roles\r\n- For data roles, prioritize core technical skills (Python, R) over concepts\r\n- For cybersecurity, prioritize security certifications (CISSP, CEH)\r\n- Include cloud platforms only if they are truly defining requirements\r\n\r\n**Healthcare**\r\n- Prioritize required licenses and certifications (RN, MD, LPN)\r\n- For specialized roles, include the specialty as a separate keyword category\r\n- For technical healthcare roles, include required clinical systems (Epic, Cerner)\r\n- Exclude general medical terminology from keywords unless it\'s specialization-specific\r\n- Separate clinical from administrative healthcare roles\r\n\r\n**Finance and Accounting**\r\n- Prioritize required certifications (CPA, CFA, Series 7)\r\n- For specialized roles, include the specific financial domain\r\n- For technical finance roles, include required financial systems\r\n- Distinguish between accounting, financial analysis, and advisory roles\r\n- Include regulatory compliance certifications when required\r\n\r\n**Manufacturing and Trades**\r\n- Prioritize specific manufacturing processes or trade skills\r\n- Include required equipment operation certifications\r\n- Distinguish between operator, technician, and engineer roles\r\n- For specialized manufacturing, include industry-specific processes\r\n- Include required safety certifications for regulated industries\r\n\r\n**Education**\r\n- Prioritize required teaching credentials and licenses\r\n- Include grade level or subject specialization for teachers\r\n- Distinguish between teaching, administration, and support roles\r\n- Include required educational methodologies for specialized teaching\r\n- Include required degree level for higher education positions\r\n\r\n**Legal and Professional Services**\r\n- Prioritize required professional licenses (JD, Bar admission)\r\n- Include practice area specializations\r\n- Distinguish between attorney, paralegal, and administrative roles\r\n- Include required legal specialties or certification areas\r\n- For consultants, include core consulting domain expertise\r\n\r\n## 5. QUALITY ASSURANCE\r\n\r\n### 5.1 Critical Reminders for Extraction\r\n\r\n**1. Comprehensive Extraction is Essential**\r\n- Clue words must be MUCH MORE comprehensive than keywords\r\n- Include ALL relevant terms, not just a selection\r\n- Err on the side of inclusion rather than exclusion\r\n- Aim for completeness rather than conciseness\r\n\r\n**2. Never Miss These Critical Categories**\r\n- **ALWAYS include the exact job title and common variations**\r\n- **ALWAYS include ALL seniority levels mentioned (Senior, Junior, etc.)**\r\n- **ALWAYS include experience requirements (years of experience)**\r\n- **ALWAYS include educational requirements**\r\n- **ALWAYS include ALL technical skills mentioned in the description**\r\n\r\n**3. Extraction Source Guidance**\r\n- Extract clue words from the ENTIRE job description\r\n- Pay special attention to the job title for role modifiers\r\n- Check both Requirements and Responsibilities sections\r\n- Don\'t miss specialized terms in the job overview\r\n- Include industry-specific terminology throughout\r\n\r\n**4. Domain-Specific Term Extraction**\r\n- Each industry has its own specialized terminology\r\n- Include ALL industry-specific terms and concepts\r\n- Add domain-specific processes and methodologies\r\n- Include relevant regulatory frameworks and standards\r\n- Add industry-specific tools and platforms\r\n\r\n**5. Final Verification**\r\n- After extraction, re-read the job description\r\n- Check for any meaningful terms not included\r\n- Verify all seniority levels and role modifiers are captured\r\n- Ensure ALL skills and technologies are represented\r\n- Confirm that the job title and variations are included\r\n\r\n### 5.2 Validation and Optimization\r\n\r\n**Extraction Validation Checklist:**\r\n- [ ] Keywords accurately represent the core, defining elements of the role\r\n- [ ] Logical relationships (AND/OR) correctly reflect the job requirements\r\n- [ ] No more than 3 keyword categories (inner lists) are used\r\n- [ ] Each keyword category contains only 1-3 terms maximum\r\n- [ ] No important terms are missing from the combined output\r\n- [ ] No generic or secondary terms appear in keywords\r\n- [ ] Clue words comprehensively cover ALL important non-core terms\r\n- [ ] ALL seniority levels and role modifiers are included in clue words\r\n- [ ] ALL role titles and variations are captured in clue words\r\n- [ ] ALL technical skills mentioned in the description appear somewhere in the output\r\n- [ ] Industry-specific conventions are followed appropriately\r\n- [ ] The extracted terms are suitable for effective database searching\r\n- [ ] The minimalist approach to keywords is balanced with comprehensiveness in clue words\r\n\r\n**Common Extraction Errors to Avoid:**\r\n1. **Over-inclusion**: Adding too many terms to keywords, diluting their value\r\n2. **Generic terms**: Including broad concepts rather than specific skills\r\n3. **Role confusion**: Mixing job title with required skills in keywords\r\n4. **Missing core requirements**: Omitting truly essential elements\r\n5. **Logic errors**: Incorrect grouping of AND/OR relationships\r\n6. **Industry-blind extraction**: Not accounting for industry-specific priorities\r\n7. **Credential omission**: Missing required licenses or certifications\r\n8. **Level confusion**: Including seniority or experience levels in keywords\r\n9. **Term redundancy**: Repeating terms across keywords and clue_words\r\n10. **Insufficient clue words**: Not capturing all important secondary terms\r\n11. **Missing modifiers**: Failing to include seniority levels or role modifiers\r\n12. **Incomplete extraction**: Not thoroughly processing all sections of the job description\r\n\r\n**Optimization Strategies:**\r\n1. Double-check against the "Requirements" or "Qualifications" section\r\n2. Verify that keywords would be effective as primary search terms\r\n3. Test extracted keywords against sample candidate profiles\r\n4. Consider different permutations of logical groupings\r\n5. Review industry-specific norms and conventions\r\n6. Validate against common search patterns for the role\r\n7. Balance minimalism in keywords with comprehensiveness in clue words\r\n8. Always include role modifiers and seniority levels in clue words\r\n9. Verify complete extraction of all technical skills, tools, and platforms\r\n10. Check that all educational and certification requirements are captured\r\n\r\n## 6. ADVANCED CONSIDERATIONS\r\n\r\n### 6.1 Handling Complex Cases\r\n\r\n**Multiple Essential Requirements:**\r\nWhen a role truly requires multiple distinct essential skills or credentials, represent these as separate keyword lists with AND logic between them:\r\n```json\r\n{\r\n  "keywords": [\r\n    ["Python", "Java"],  // Programming language requirement (need either Python OR Java)\r\n    ["AWS", "Azure"],    // Cloud platform requirement (need either AWS OR Azure)\r\n    ["Machine Learning"] // Domain expertise requirement\r\n  ]\r\n}\r\n```\r\nThis structure indicates a candidate must have: (Python OR Java) AND (AWS OR Azure) AND Machine Learning.\r\n\r\n**Specialized Roles with Multiple Defining Elements:**\r\nSome specialized roles may genuinely require multiple defining elements. In these cases, it\'s acceptable to have 2-3 keyword lists:\r\n```json\r\n{\r\n  "keywords": [\r\n    ["RN"],                        // Required credential\r\n    ["ICU", "Critical Care"],      // Required specialization\r\n    ["ACLS", "BLS"]                // Required certifications\r\n  ]\r\n}\r\n```\r\n\r\n**Handling Domain-Specific Terminology:**\r\nFor specialized industries, prioritize industry-standard terminology:\r\n- Healthcare: Use standardized medical role certifications (RN, MD, LPN)\r\n- Technology: Use specific languages and frameworks rather than concepts\r\n- Finance: Use regulated certification names (CPA, CFA, Series 7)\r\n- Education: Use standardized teaching credentials and specializations\r\n- Legal: Use jurisdiction-specific credential terminology (JD, Bar admission)\r\n\r\n**Handling Ambiguous Job Titles:**\r\nWhen job titles are ambiguous or overly generic:\r\n1. Look to the requirements section for defining elements\r\n2. Focus on required technical skills or credentials\r\n3. Identify the specific domain expertise required\r\n4. Use industry-specific defining terms\r\n\r\n**Handling Emerging or Non-Standard Roles:**\r\nFor emerging fields or non-traditional roles:\r\n1. Identify the core technical skill or domain expertise\r\n2. Look for terms that would be used in specialized job searches\r\n3. Focus on the unique defining elements of the role\r\n4. Avoid overly generic terms even if the role is new\r\n\r\n### 6.2 Implementation Guidelines\r\n\r\n**Database Integration:**\r\n- Keywords should be indexed for efficient searching\r\n- Each keyword category should support both exact and fuzzy matching\r\n- Logical relationships (AND/OR) should be preserved in search queries\r\n- Search algorithms should handle variations and synonyms\r\n- Clue words should be searchable but with lower weighting than keywords\r\n\r\n**Processing Architecture:**\r\n- The extraction system should run as a pre-processing step before database storage\r\n- Extracted keywords and clue words should be stored alongside the original job description\r\n- The system should support batch processing of multiple job descriptions\r\n- Extraction results should be auditable and manually adjustable if needed\r\n- Performance metrics should track search effectiveness based on extracted terms\r\n\r\n**Machine Learning Enhancement:**\r\n- The extraction system can be augmented with machine learning to improve accuracy\r\n- Training data should include manually validated keyword extractions\r\n- Models should be industry-aware with domain-specific training\r\n- Feedback loops should incorporate search and match success metrics\r\n- Regular retraining should incorporate new terminology and emerging roles\r\n\r\n**System Performance Metrics:**\r\n- Precision: Accuracy of extracted keywords in representing core requirements\r\n- Recall: Comprehensiveness in capturing all truly essential elements\r\n- Search effectiveness: Ability to find relevant candidates using extracted terms\r\n- Processing efficiency: Speed and resource usage of the extraction process\r\n- User satisfaction: Recruiter and hiring manager feedback on match quality\r\n\r\n### 6.3 Searchable Profile Fields\r\nThe extracted keywords should be optimized to match the following candidate profile fields across all industries:\r\n- Profile interested jobs titles\r\n- Raw skills\r\n- Education fields and degrees\r\n- Work experience job titles, grades, industries, and skills\r\n- Certificates and licenses\r\n- Professional certifications and credentials\r\n- Specialized training and qualifications\r\n- Industry-specific methodologies\r\n- Regulated professional designations\r\n\r\n## 7. EXAMPLES WITH ANALYSIS\r\n\r\n### 7.1 Software Development Role\r\n**Input:**\r\n```json\r\n{\r\n "job_title": "Senior Software Engineer (Python/Django)",\r\n "job_description": "We are seeking an experienced Senior Software Engineer with strong Python skills to join our growing engineering team. The ideal candidate will have expert-level knowledge of Python and experience with Django framework. You will be responsible for designing, coding and modifying applications, from requirements gathering to software deployment. Required: 5+ years of Python development experience, strong understanding of Django framework, experience with RESTful APIs, knowledge of database design and SQL. Preferred: AWS experience, containerization knowledge (Docker/Kubernetes), CI/CD pipeline experience, microservices architecture."\r\n}\r\n```\r\n\r\n**Analysis:**\r\n1. Core defining elements: This is fundamentally a Python development role with Django as a key framework\r\n2. Required vs. preferred: Python and Django are explicitly required, while AWS and containerization are preferred\r\n3. The role essence: At its core, this is a Python-focused backend development position\r\n\r\n**Output:**\r\n```json\r\n{\r\n "keywords": [\r\n   ["Python"],\r\n   ["Django"]\r\n ],\r\n "clue_words": ["Senior", "Software Engineer", "Backend Developer", "RESTful APIs", "SQL", "Database Design", "AWS", "Docker", "Kubernetes", "CI/CD", "Microservices", "5+ years experience", "Applications", "Requirements Gathering", "Software Deployment", "Coding", "Programming", "Engineering", "Software Development", "API Development", "Backend", "Web Development"]\r\n}\r\n```\r\n\r\n### 7.2 Healthcare Role\r\n**Input:**\r\n```json\r\n{\r\n  "job_position": "Registered Nurse - Intensive Care Unit",\r\n  "description": "We are seeking a dedicated and compassionate Registered Nurse (RN) to join our Intensive Care Unit (ICU) team. The ideal candidate will have strong critical care experience and excellent clinical skills. Requirements: Current state Registered Nurse (RN) license, Bachelor of Science in Nursing (BSN) required, Minimum of 2 years of ICU or critical care experience, Current BLS and ACLS certifications required, PALS and CCRN certifications preferred."\r\n}\r\n```\r\n\r\n**Analysis:**\r\n1. Core defining elements: This is fundamentally a nursing role requiring RN licensure\r\n2. Specialization: ICU/Critical Care is a specific specialization within nursing\r\n3. Required certifications: BLS and ACLS are specifically required\r\n4. The BSN requirement is a defining educational requirement in this case\r\n\r\n**Output:**\r\n```json\r\n{\r\n "keywords": [\r\n   ["RN"],\r\n   ["ICU", "Critical Care"],\r\n   ["BSN"]\r\n ],\r\n "clue_words": ["Registered Nurse", "Intensive Care Unit", "BLS", "ACLS", "PALS", "CCRN", "Bachelor of Science in Nursing", "Healthcare", "Hospital", "Patient Care", "Clinical Skills", "2+ years experience", "Nursing License", "Medical", "Critical Care Nurse", "Intensive Care Nurse", "Nursing", "Clinical Care", "Patient Assessment", "Medical Records", "Healthcare Team", "Medical Treatments", "Patient Monitoring", "Electronic Medical Records", "Healthcare Facility", "Medication Administration"]\r\n}\r\n```\r\n\r\n### 7.3 Specialized Technical Role\r\n**Input:**\r\n```json\r\n{\r\n  "job_position": "CNC Machinist - Aerospace",\r\n  "description": "Leading aerospace manufacturer is seeking an experienced CNC Machinist to operate and program multi-axis CNC machines. The ideal candidate will have experience with precision machining of aerospace components. Requirements: 3+ years experience operating CNC lathes and mills, ability to program CNC machines using G-code and M-code, experience with Fanuc and Haas control systems, knowledge of GD&T and blueprint reading, experience with precision measuring instruments, ability to set up and operate 5-axis CNC machines. Must have experience working with aerospace alloys including titanium and Inconel. High school diploma or equivalent required; technical certificate in machining preferred."\r\n}\r\n```\r\n\r\n**Analysis:**\r\n1. Core defining elements: This is fundamentally a CNC machining role\r\n2. Specialization: 5-axis CNC is a specific advanced skill within CNC operation\r\n3. Industry specificity: Aerospace machining has specialized requirements\r\n4. Critical skills: G-code programming is essential for a CNC machinist\r\n\r\n**Output:**\r\n```json\r\n{\r\n "keywords": [\r\n   ["CNC"],\r\n   ["G-code", "M-code"],\r\n   ["5-axis"]\r\n ],\r\n "clue_words": ["Machinist", "CNC Machinist", "Aerospace", "Manufacturing", "CNC Operation", "Fanuc", "Haas", "GD&T", "Blueprint Reading", "Precision Measuring", "Titanium", "Inconel", "Aerospace Alloys", "CNC Lathes", "CNC Mills", "Technical Certificate", "Machining", "3+ years experience", "High School Diploma", "Production", "Precision Machining", "Metal Fabrication", "Manufacturing Equipment", "Quality Control", "Metrology", "Industrial Manufacturing", "CAD/CAM", "Tool Setting", "Machine Programming", "Troubleshooting", "Production Environment", "Metal Working", "Manufacturing Processes"]\r\n}\r\n```\r\n\r\n## 8. FINAL OUTPUT FORMAT\r\nThe system must return a valid JSON object, formatted as follows:\r\n```json\r\n{\r\n  "keywords": [\r\n    ["term1", "term2", ...],  // Terms within each inner list use OR logic\r\n    ["term3", ...],           // Different inner lists use AND logic\r\n    ...\r\n  ],\r\n  "clue_words": ["clue_word1", "clue_word2", ...]  // Flat list with no logical relationships\r\n}\r\n```\r\n\r\nThe output must be provided as markdown within code fences (```json).',
                    fj(VertexAIModel.temperature): 1.0,
                    fj(VertexAIModel.max_tokens): 8192,
                }
            ),
        ]
        VertexAIModel.objects.bulk_create(
            instances,
            update_conflicts=True,
            update_fields=[
                VertexAIModel.model_name.field.name,
                VertexAIModel.instruction.field.name,
                VertexAIModel.temperature.field.name,
                VertexAIModel.max_tokens.field.name,
            ],
            unique_fields=[VertexAIModel.slug.field.name],
        )
