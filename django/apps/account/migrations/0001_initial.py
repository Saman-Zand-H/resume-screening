# Generated by Django 5.1.3 on 2024-12-03 09:17

import account.models
import colorfield.fields
import common.validators
import computedfields.resolver
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('flex_blob', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(blank=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, null=True, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('not_known', 'Not Known'), ('not_applicable', 'Not Applicable')], max_length=50, null=True, verbose_name='Gender')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Birth Date')),
                ('raw_skills', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, null=True, size=None, verbose_name='Raw Skills')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', account.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AvatarFile',
            fields=[
                ('filemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='flex_blob.filemodel')),
            ],
            bases=('flex_blob.filemodel',),
        ),
        migrations.CreateModel(
            name='CanadaVisa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('citizenship', 'Citizenship'), ('permanent_resident', 'Permanent Resident (PR)'), ('temporary_resident_open_work_permit', 'Temporary Resident (Open Work Permit)'), ('temporary_resident_close_work_permit', 'Temporary Resident (Close Work Permit)'), ('temporary_resident_study_permit', 'Temporary Resident (Study Permit)'), ('refugee_work_permit', 'Refugee (Work Permit)'), ('seasonal_agricultural_worker_program', 'Seasonal Agricultural Worker Program (SAWP)'), ('international_experience_canada', 'International Experience Canada (IEC)'), ('electronic_travel_authorization', 'Electronic Travel Authorization (eTA)'), ('visitor_visa', 'Visitor Visa')], max_length=50, verbose_name='Status')),
                ('citizenship_document', models.FileField(upload_to=account.models.citizenship_document_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png']), common.validators.ValidateFileSize(max=5)], verbose_name='Citizenship Document')),
            ],
        ),
        migrations.CreateModel(
            name='CertificateAndLicense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('drafted', 'Drafted'), ('submitted', 'Submitted'), ('rejected', 'Rejected'), ('verified', 'Verified'), ('self_verified', 'Self Verified')], default='drafted', max_length=50, verbose_name='Status')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('allow_self_verification', models.BooleanField(default=False, verbose_name='Allow Self Verification')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('certifier', models.CharField(max_length=255, verbose_name='Certifier')),
                ('issued_at', models.DateField(verbose_name='Issued At')),
                ('expired_at', models.DateField(blank=True, null=True, verbose_name='Expired At')),
            ],
            options={
                'verbose_name': 'Certificate And License',
                'verbose_name_plural': 'Certificates And Licenses',
            },
        ),
        migrations.CreateModel(
            name='CertificateAndLicenseOfflineVerificationMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('certificate_file', models.FileField(upload_to=account.models.certificate_and_license_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png']), common.validators.ValidateFileSize(max=5)], verbose_name='Certificate And License')),
            ],
            options={
                'verbose_name': 'Certificate And License Offline Verification Method',
                'verbose_name_plural': 'Certificate And License Offline Verification Methods',
            },
        ),
        migrations.CreateModel(
            name='CertificateAndLicenseOnlineVerificationMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('certificate_link', models.URLField(verbose_name='Link')),
            ],
            options={
                'verbose_name': 'Certificate And License Online Verification Method',
                'verbose_name_plural': 'Certificate And License Online Verification Methods',
            },
        ),
        migrations.CreateModel(
            name='CommunicationMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('website', models.URLField(verbose_name='Website')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('department', models.CharField(max_length=255, verbose_name='Department')),
                ('person', models.CharField(max_length=255, verbose_name='Person')),
                ('degree_file', models.FileField(upload_to=account.models.degree_file_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png']), common.validators.ValidateFileSize(max=5)], verbose_name='Degree File')),
            ],
            options={
                'verbose_name': 'Communication Method',
                'verbose_name_plural': 'Communication Methods',
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('website', 'Website'), ('address', 'Address'), ('linkedin', 'LinkedIn'), ('whatsapp', 'WhatsApp'), ('phone', 'Phone')], default='website', max_length=50, verbose_name='Type')),
                ('value', models.CharField(max_length=255, verbose_name='Value')),
            ],
            options={
                'verbose_name': 'Contact',
                'verbose_name_plural': 'Contacts',
            },
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('drafted', 'Drafted'), ('submitted', 'Submitted'), ('rejected', 'Rejected'), ('verified', 'Verified'), ('self_verified', 'Self Verified')], default='drafted', max_length=50, verbose_name='Status')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('allow_self_verification', models.BooleanField(default=False, verbose_name='Allow Self Verification')),
                ('degree', models.CharField(choices=[('bachelors', 'Bachelors'), ('masters', 'Masters'), ('phd', 'PhD'), ('associate', 'Associate'), ('diploma', 'Diploma'), ('certificate', 'Certificate')], max_length=50, verbose_name='Degree')),
                ('start', models.DateField(verbose_name='Start Date')),
                ('end', models.DateField(blank=True, null=True, verbose_name='End Date')),
            ],
            options={
                'verbose_name': 'Education',
                'verbose_name_plural': 'Educations',
            },
        ),
        migrations.CreateModel(
            name='EmployerLetterMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('employer_letter', models.FileField(upload_to=account.models.employer_letter_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png']), common.validators.ValidateFileSize(max=5)], verbose_name='Employer Letter')),
            ],
            options={
                'verbose_name': 'Employer Letter Method',
                'verbose_name_plural': 'Employer Letter Methods',
            },
        ),
        migrations.CreateModel(
            name='IEEMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('education_evaluation_document', models.FileField(upload_to=account.models.education_evaluation_document_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png']), common.validators.ValidateFileSize(max=5)], verbose_name='Education Evaluation Document')),
                ('evaluator', models.CharField(choices=[('wes', 'World Education Services'), ('iqas', 'International Qualifications Assessment Service'), ('icas', 'International Credential Assessment Service of Canada'), ('ces', 'Comparative Education Service')], max_length=50, verbose_name='Academic Credential Evaluator')),
            ],
            options={
                'verbose_name': 'International Education Evaluation Method',
                'verbose_name_plural': 'International Education Evaluation Methods',
            },
        ),
        migrations.CreateModel(
            name='LanguageCertificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('drafted', 'Drafted'), ('submitted', 'Submitted'), ('rejected', 'Rejected'), ('verified', 'Verified'), ('self_verified', 'Self Verified')], default='drafted', max_length=50, verbose_name='Status')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('allow_self_verification', models.BooleanField(default=False, verbose_name='Allow Self Verification')),
                ('language', models.CharField(choices=[('af', 'Afrikaans'), ('ar', 'Arabic'), ('ar-dz', 'Algerian Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('ckb', 'Central Kurdish (Sorani)'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('hy', 'Armenian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('ig', 'Igbo'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kab', 'Kabyle'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('ky', 'Kyrgyz'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('ms', 'Malay'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('tg', 'Tajik'), ('th', 'Thai'), ('tk', 'Turkmen'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('ug', 'Uyghur'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('uz', 'Uzbek'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], max_length=32, verbose_name='Language')),
                ('issued_at', models.DateField(verbose_name='Issued At')),
                ('expired_at', models.DateField(verbose_name='Expired At')),
                ('listening_score', models.FloatField(verbose_name='Listening Score')),
                ('reading_score', models.FloatField(verbose_name='Reading Score')),
                ('writing_score', models.FloatField(verbose_name='Writing Score')),
                ('speaking_score', models.FloatField(verbose_name='Speaking Score')),
                ('band_score', models.FloatField(verbose_name='Band Score')),
            ],
            options={
                'verbose_name': 'Language Certificate',
                'verbose_name_plural': 'Language Certificates',
            },
        ),
        migrations.CreateModel(
            name='OfflineMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('certificate_file', models.FileField(upload_to=account.models.language_certificate_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png']), common.validators.ValidateFileSize(max=5)], verbose_name='Language Certificate')),
            ],
            options={
                'verbose_name': 'Offline Method',
                'verbose_name_plural': 'Offline Methods',
            },
        ),
        migrations.CreateModel(
            name='OnlineMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('certificate_link', models.URLField(verbose_name='Link')),
            ],
            options={
                'verbose_name': 'Online Method',
                'verbose_name_plural': 'Online Methods',
            },
        ),
        migrations.CreateModel(
            name='PaystubsMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('paystubs', models.FileField(upload_to=account.models.paystubs_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png']), common.validators.ValidateFileSize(max=5)], verbose_name='Employer Letter')),
            ],
            options={
                'verbose_name': 'Paystubs Method',
                'verbose_name_plural': 'Paystubs Methods',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('height', models.IntegerField(blank=True, null=True)),
                ('weight', models.IntegerField(blank=True, null=True)),
                ('skin_color', colorfield.fields.ColorField(blank=True, choices=[('#FFDFC4', 'Very Fair'), ('#F0D5B1', 'Fair'), ('#E5B897', 'Light'), ('#D9A377', 'Light Medium'), ('#C68642', 'Medium'), ('#A86B33', 'Olive'), ('#8D5524', 'Brown'), ('#60391C', 'Dark Brown'), ('#3B260B', 'Very Dark'), ('#100C08', 'Deep')], default=None, image_field=None, max_length=25, null=True, samples=None, verbose_name='Skin Color')),
                ('hair_color', colorfield.fields.ColorField(blank=True, default=None, image_field=None, max_length=25, null=True, samples=None, verbose_name='Hair Color')),
                ('eye_color', colorfield.fields.ColorField(blank=True, choices=[('#FFBF00', 'Amber'), ('#5DADEC', 'Blue'), ('#6B4226', 'Brown'), ('#BEBEBE', 'Gray'), ('#1CAC78', 'Green'), ('#8E7618', 'Hazel')], default=None, image_field=None, max_length=25, null=True, samples=None, verbose_name='Eye Color')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to=account.models.avatar_path, validators=[common.validators.ValidateFileSize(max=3)], verbose_name='Avatar')),
                ('full_body_image', models.ImageField(blank=True, null=True, upload_to=account.models.full_body_image_path, validators=[common.validators.ValidateFileSize(max=3)], verbose_name='Full Body Image')),
                ('employment_status', models.CharField(blank=True, choices=[('employed', 'Employed'), ('unemployed', 'Unemployed')], max_length=50, null=True, verbose_name='Employment Status')),
                ('native_language', models.CharField(blank=True, choices=[('af', 'Afrikaans'), ('ar', 'Arabic'), ('ar-dz', 'Algerian Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('ckb', 'Central Kurdish (Sorani)'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('hy', 'Armenian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('ig', 'Igbo'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kab', 'Kabyle'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('ky', 'Kyrgyz'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('ms', 'Malay'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('tg', 'Tajik'), ('th', 'Thai'), ('tk', 'Turkmen'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('ug', 'Uyghur'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('uz', 'Uzbek'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], max_length=32, null=True, verbose_name='Native Language')),
                ('fluent_languages', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('af', 'Afrikaans'), ('ar', 'Arabic'), ('ar-dz', 'Algerian Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('ckb', 'Central Kurdish (Sorani)'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('hy', 'Armenian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('ig', 'Igbo'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kab', 'Kabyle'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('ky', 'Kyrgyz'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('ms', 'Malay'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('tg', 'Tajik'), ('th', 'Thai'), ('tk', 'Turkmen'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('ug', 'Uyghur'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('uz', 'Uzbek'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], max_length=32), blank=True, null=True, size=None, verbose_name='Fluent Languages')),
                ('credits', models.IntegerField(editable=False, verbose_name='Credits')),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
            bases=(computedfields.resolver._ComputedFieldsModelBase, models.Model),
        ),
        migrations.CreateModel(
            name='ReferenceCheckEmployer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, verbose_name='Phone Number')),
            ],
            options={
                'verbose_name': 'Reference Check Employer',
                'verbose_name_plural': 'Reference Check Employers',
            },
        ),
        migrations.CreateModel(
            name='Referral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(default=account.models.generate_unique_referral_code, max_length=20, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ReferralUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referred_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Resume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=account.models.resume_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png']), common.validators.ValidateFileSize(max=5)], verbose_name='Resume')),
                ('text', models.TextField(blank=True, editable=False, null=True, verbose_name='Resume Text')),
            ],
            options={
                'verbose_name': 'Resume',
                'verbose_name_plural': 'Resumes',
            },
        ),
        migrations.CreateModel(
            name='WorkExperience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('drafted', 'Drafted'), ('submitted', 'Submitted'), ('rejected', 'Rejected'), ('verified', 'Verified'), ('self_verified', 'Self Verified')], default='drafted', max_length=50, verbose_name='Status')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('allow_self_verification', models.BooleanField(default=False, verbose_name='Allow Self Verification')),
                ('start', models.DateField(verbose_name='Start Date')),
                ('end', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('organization', models.CharField(max_length=255, verbose_name='Organization')),
            ],
            options={
                'verbose_name': 'Work Experience',
                'verbose_name_plural': 'Work Experiences',
            },
        ),
    ]
