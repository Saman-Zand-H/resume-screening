# Generated by Django 5.1.4 on 2024-12-13 14:21

import account.managers
import account.models
import colorfield.fields
import common.mixins
import computedfields.resolver
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('cities_light', '0011_alter_city_country_alter_city_region_and_more'),
        ('common', '0001_initial'),
        ('flex_blob', '0002_filemodel_uploaded_at'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(blank=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, null=True, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('not_known', 'Not Known'), ('not_applicable', 'Not Applicable')], max_length=50, null=True, verbose_name='Gender')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Birth Date')),
                ('raw_skills', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, null=True, size=None, verbose_name='Raw Skills')),
                ('available_jobs', models.ManyToManyField(blank=True, to='common.job', verbose_name='Available Jobs')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('skills', models.ManyToManyField(editable=False, related_name='users', to='common.skill', verbose_name='Skills')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', account.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AvatarFile',
            fields=[
                ('filemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='flex_blob.filemodel')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Avatar Image',
                'verbose_name_plural': 'Avatar Images',
            },
            bases=('flex_blob.filemodel',),
        ),
        migrations.CreateModel(
            name='CertificateAndLicense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('drafted', 'Drafted'), ('submitted', 'Submitted'), ('rejected', 'Rejected'), ('verified', 'Verified'), ('self_verified', 'Self Verified')], default='drafted', max_length=50, verbose_name='Status')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('allow_self_verification', models.BooleanField(default=False, verbose_name='Allow Self Verification')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('certifier', models.CharField(max_length=255, verbose_name='Certifier')),
                ('issued_at', models.DateField(verbose_name='Issued At')),
                ('expired_at', models.DateField(blank=True, null=True, verbose_name='Expired At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Certificate And License',
                'verbose_name_plural': 'Certificates And Licenses',
            },
            bases=(models.Model, common.mixins.HasDurationMixin),
        ),
        migrations.CreateModel(
            name='CertificateAndLicenseOnlineVerificationMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('certificate_link', models.URLField(verbose_name='Link')),
                ('certificate_and_license', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='auth_account.certificateandlicense', verbose_name='Certificate And License')),
            ],
            options={
                'verbose_name': 'Certificate And License Online Verification Method',
                'verbose_name_plural': 'Certificate And License Online Verification Methods',
            },
        ),
        migrations.CreateModel(
            name='CertificateFile',
            fields=[
                ('filemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='flex_blob.filemodel')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Certificate File',
                'verbose_name_plural': 'Certificate Files',
            },
            bases=('flex_blob.filemodel',),
        ),
        migrations.CreateModel(
            name='CertificateAndLicenseOfflineVerificationMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('certificate_and_license', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='auth_account.certificateandlicense', verbose_name='Certificate And License')),
                ('certificate_file', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='offline_method', to='auth_account.certificatefile', verbose_name='Certificate And License')),
            ],
            options={
                'verbose_name': 'Certificate And License Offline Verification Method',
                'verbose_name_plural': 'Certificate And License Offline Verification Methods',
            },
        ),
        migrations.CreateModel(
            name='CitizenshipDocumentFile',
            fields=[
                ('filemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='flex_blob.filemodel')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Citizenship Document File',
                'verbose_name_plural': 'Citizenship Document Files',
            },
            bases=('flex_blob.filemodel',),
        ),
        migrations.CreateModel(
            name='CanadaVisa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('citizenship', 'Citizenship'), ('permanent_resident', 'Permanent Resident (PR)'), ('temporary_resident_open_work_permit', 'Temporary Resident (Open Work Permit)'), ('temporary_resident_close_work_permit', 'Temporary Resident (Close Work Permit)'), ('temporary_resident_study_permit', 'Temporary Resident (Study Permit)'), ('refugee_work_permit', 'Refugee (Work Permit)'), ('seasonal_agricultural_worker_program', 'Seasonal Agricultural Worker Program (SAWP)'), ('international_experience_canada', 'International Experience Canada (IEC)'), ('electronic_travel_authorization', 'Electronic Travel Authorization (eTA)'), ('visitor_visa', 'Visitor Visa')], max_length=50, verbose_name='Status')),
                ('nationality', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='canada_visas', to='cities_light.country', verbose_name='Nationality')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='canada_visa', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('citizenship_document', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='canada_visa', to='auth_account.citizenshipdocumentfile', verbose_name='Citizenship Document')),
            ],
            options={
                'verbose_name': 'Canada Visa',
                'verbose_name_plural': 'Canada Visas',
            },
        ),
        migrations.CreateModel(
            name='DegreeFile',
            fields=[
                ('filemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='flex_blob.filemodel')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Degree File',
                'verbose_name_plural': 'Degree Files',
            },
            bases=('flex_blob.filemodel',),
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('drafted', 'Drafted'), ('submitted', 'Submitted'), ('rejected', 'Rejected'), ('verified', 'Verified'), ('self_verified', 'Self Verified')], default='drafted', max_length=50, verbose_name='Status')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('allow_self_verification', models.BooleanField(default=False, verbose_name='Allow Self Verification')),
                ('degree', models.CharField(choices=[('bachelors', 'Bachelors'), ('masters', 'Masters'), ('phd', 'PhD'), ('associate', 'Associate'), ('diploma', 'Diploma'), ('certificate', 'Certificate')], max_length=50, verbose_name='Degree')),
                ('start', models.DateField(verbose_name='Start Date')),
                ('end', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cities_light.city', verbose_name='City')),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='common.field', verbose_name='Field')),
                ('university', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='common.university', verbose_name='University')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Education',
                'verbose_name_plural': 'Educations',
            },
            bases=(models.Model, common.mixins.HasDurationMixin),
        ),
        migrations.CreateModel(
            name='CommunicationMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('website', models.URLField(verbose_name='Website')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('department', models.CharField(max_length=255, verbose_name='Department')),
                ('person', models.CharField(max_length=255, verbose_name='Person')),
                ('degree_file', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='communication_method', to='auth_account.degreefile', verbose_name='Degree File')),
                ('education', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='auth_account.education', verbose_name='Education')),
            ],
            options={
                'verbose_name': 'Communication Method',
                'verbose_name_plural': 'Communication Methods',
            },
        ),
        migrations.CreateModel(
            name='EducationEvaluationDocumentFile',
            fields=[
                ('filemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='flex_blob.filemodel')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Education Evaluation Document File',
                'verbose_name_plural': 'Education Evaluation Document Files',
            },
            bases=('flex_blob.filemodel',),
        ),
        migrations.CreateModel(
            name='EmployerLetterFile',
            fields=[
                ('filemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='flex_blob.filemodel')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Employer Letter File',
                'verbose_name_plural': 'Employer Letter Files',
            },
            bases=('flex_blob.filemodel',),
        ),
        migrations.CreateModel(
            name='EmployerLetterMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('employer_letter', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='employer_letter_method', to='auth_account.employerletterfile', verbose_name='Employer Letter')),
            ],
            options={
                'verbose_name': 'Employer Letter Method',
                'verbose_name_plural': 'Employer Letter Methods',
            },
        ),
        migrations.CreateModel(
            name='FullBodyImageFile',
            fields=[
                ('filemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='flex_blob.filemodel')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Full Body Image',
                'verbose_name_plural': 'Full Body Images',
            },
            bases=('flex_blob.filemodel',),
        ),
        migrations.CreateModel(
            name='IEEMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('evaluator', models.CharField(choices=[('wes', 'World Education Services'), ('iqas', 'International Qualifications Assessment Service'), ('icas', 'International Credential Assessment Service of Canada'), ('ces', 'Comparative Education Service'), ('other', 'Other')], max_length=50, verbose_name='Academic Credential Evaluator')),
                ('education', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='auth_account.education', verbose_name='Education')),
                ('education_evaluation_document', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='iee_method', to='auth_account.educationevaluationdocumentfile', verbose_name='Education Evaluation Document')),
            ],
            options={
                'verbose_name': 'International Education Evaluation Method',
                'verbose_name_plural': 'International Education Evaluation Methods',
            },
        ),
        migrations.CreateModel(
            name='LanguageCertificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('drafted', 'Drafted'), ('submitted', 'Submitted'), ('rejected', 'Rejected'), ('verified', 'Verified'), ('self_verified', 'Self Verified')], default='drafted', max_length=50, verbose_name='Status')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('allow_self_verification', models.BooleanField(default=False, verbose_name='Allow Self Verification')),
                ('language', models.CharField(choices=[('af', 'Afrikaans'), ('ar', 'Arabic'), ('ar-dz', 'Algerian Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('ckb', 'Central Kurdish (Sorani)'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('hy', 'Armenian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('ig', 'Igbo'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kab', 'Kabyle'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('ky', 'Kyrgyz'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('ms', 'Malay'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('tg', 'Tajik'), ('th', 'Thai'), ('tk', 'Turkmen'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('ug', 'Uyghur'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('uz', 'Uzbek'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], max_length=32, verbose_name='Language')),
                ('issued_at', models.DateField(verbose_name='Issued At')),
                ('expired_at', models.DateField(verbose_name='Expired At')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificates', to='common.languageproficiencytest', verbose_name='Test')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Language Certificate',
                'verbose_name_plural': 'Language Certificates',
            },
        ),
        migrations.CreateModel(
            name='LanguageCertificateFile',
            fields=[
                ('filemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='flex_blob.filemodel')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Language Certificate File',
                'verbose_name_plural': 'Language Certificate Files',
            },
            bases=('flex_blob.filemodel',),
        ),
        migrations.CreateModel(
            name='LanguageCertificateValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=255, verbose_name='Value')),
                ('language_certificate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='auth_account.languagecertificate', verbose_name='Language Certificate')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='common.languageproficiencyskill', verbose_name='Skill')),
            ],
            options={
                'verbose_name': 'Language Certificate Value',
                'verbose_name_plural': 'Language Certificate Values',
            },
        ),
        migrations.CreateModel(
            name='OfflineMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('certificate_file', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='offline_method', to='auth_account.languagecertificatefile', verbose_name='Language Certificate')),
                ('language_certificate', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='auth_account.languagecertificate', verbose_name='Language Certificate')),
            ],
            options={
                'verbose_name': 'Offline Method',
                'verbose_name_plural': 'Offline Methods',
            },
        ),
        migrations.CreateModel(
            name='OnlineMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('certificate_link', models.URLField(verbose_name='Link')),
                ('language_certificate', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='auth_account.languagecertificate', verbose_name='Language Certificate')),
            ],
            options={
                'verbose_name': 'Online Method',
                'verbose_name_plural': 'Online Methods',
            },
        ),
        migrations.CreateModel(
            name='PaystubsFile',
            fields=[
                ('filemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='flex_blob.filemodel')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Paystubs File',
                'verbose_name_plural': 'Paystubs Files',
            },
            bases=('flex_blob.filemodel',),
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('height', models.IntegerField(blank=True, null=True)),
                ('weight', models.IntegerField(blank=True, null=True)),
                ('skin_color', colorfield.fields.ColorField(blank=True, choices=[('#FFDFC4', 'Very Fair'), ('#F0D5B1', 'Fair'), ('#E5B897', 'Light'), ('#D9A377', 'Light Medium'), ('#C68642', 'Medium'), ('#A86B33', 'Olive'), ('#8D5524', 'Brown'), ('#60391C', 'Dark Brown'), ('#3B260B', 'Very Dark'), ('#100C08', 'Deep')], default=None, image_field=None, max_length=25, null=True, samples=None, verbose_name='Skin Color')),
                ('hair_color', colorfield.fields.ColorField(blank=True, default=None, image_field=None, max_length=25, null=True, samples=None, verbose_name='Hair Color')),
                ('eye_color', colorfield.fields.ColorField(blank=True, choices=[('#FFBF00', 'Amber'), ('#5DADEC', 'Blue'), ('#6B4226', 'Brown'), ('#BEBEBE', 'Gray'), ('#1CAC78', 'Green'), ('#8E7618', 'Hazel')], default=None, image_field=None, max_length=25, null=True, samples=None, verbose_name='Eye Color')),
                ('employment_status', models.CharField(blank=True, choices=[('employed', 'Employed'), ('unemployed', 'Unemployed')], max_length=50, null=True, verbose_name='Employment Status')),
                ('native_language', models.CharField(blank=True, choices=[('af', 'Afrikaans'), ('ar', 'Arabic'), ('ar-dz', 'Algerian Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('ckb', 'Central Kurdish (Sorani)'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('hy', 'Armenian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('ig', 'Igbo'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kab', 'Kabyle'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('ky', 'Kyrgyz'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('ms', 'Malay'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('tg', 'Tajik'), ('th', 'Thai'), ('tk', 'Turkmen'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('ug', 'Uyghur'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('uz', 'Uzbek'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], max_length=32, null=True, verbose_name='Native Language')),
                ('fluent_languages', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('af', 'Afrikaans'), ('ar', 'Arabic'), ('ar-dz', 'Algerian Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('ckb', 'Central Kurdish (Sorani)'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('hy', 'Armenian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('ig', 'Igbo'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kab', 'Kabyle'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('ky', 'Kyrgyz'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('ms', 'Malay'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('tg', 'Tajik'), ('th', 'Thai'), ('tk', 'Turkmen'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('ug', 'Uyghur'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('uz', 'Uzbek'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], max_length=32), blank=True, null=True, size=None, verbose_name='Fluent Languages')),
                ('job_type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('full_time', 'Full Time'), ('part_time', 'Part Time'), ('permanent', 'Permanent'), ('fix_term_contract', 'Fix Term Contract'), ('seasonal', 'Seasonal'), ('freelance', 'Freelance'), ('apprenticeship', 'Apprenticeship'), ('prince_edward_island', 'Prince Edward Island'), ('internship_co_op', 'Internship/Co-op')], max_length=50), blank=True, null=True, size=None, verbose_name='Job Type')),
                ('job_location_type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('precise_location', 'On-site (Precise Location)'), ('limited_area', 'On-site (Within a Limited Area)'), ('remote', 'Remote'), ('hybrid', 'Hybrid'), ('on_the_road', 'On the road'), ('global', 'Global')], max_length=50), blank=True, null=True, size=None, verbose_name='Job Location Type')),
                ('scores', models.JSONField(default=dict, editable=False, verbose_name='Scores')),
                ('credits', models.IntegerField(editable=False, verbose_name='Credits')),
                ('avatar', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profile', to='auth_account.avatarfile', verbose_name='Avatar')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profiles', to='cities_light.city', verbose_name='City')),
                ('full_body_image', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profile', to='auth_account.fullbodyimagefile', verbose_name='Full Body Image')),
                ('interested_jobs', models.ManyToManyField(blank=True, to='common.job', verbose_name='Interested Jobs')),
                ('job_cities', models.ManyToManyField(blank=True, related_name='job_profiles', to='cities_light.city', verbose_name='Job City')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
            bases=(computedfields.resolver._ComputedFieldsModelBase, models.Model),
        ),
        migrations.CreateModel(
            name='ReferenceCheckEmployer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, verbose_name='Phone Number')),
                ('position', models.CharField(max_length=255, verbose_name='Position')),
                ('work_experience_verification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employers', to='auth_account.employerlettermethod', verbose_name='Work Experience Verification')),
            ],
            options={
                'verbose_name': 'Reference Check Employer',
                'verbose_name_plural': 'Reference Check Employers',
            },
        ),
        migrations.CreateModel(
            name='Referral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(default=account.models.generate_unique_referral_code, max_length=20, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='referral', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ReferralUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referred_at', models.DateTimeField(auto_now_add=True)),
                ('referral', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referred_users', to='auth_account.referral')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='referral_source', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ResumeFile',
            fields=[
                ('filemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='flex_blob.filemodel')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Resume File',
                'verbose_name_plural': 'Resume Files',
            },
            bases=('flex_blob.filemodel',),
        ),
        migrations.CreateModel(
            name='Resume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True, null=True, verbose_name='Resume Text')),
                ('resume_json', models.JSONField(default=dict, verbose_name='Resume JSON')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='resume', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('file', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='resume', to='auth_account.resumefile', verbose_name='Resume')),
            ],
            options={
                'verbose_name': 'Resume',
                'verbose_name_plural': 'Resumes',
            },
        ),
        migrations.CreateModel(
            name='SupportTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_id', models.CharField(default=account.models.generate_ticket_id, editable=False, max_length=255, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(max_length=1024)),
                ('status', models.CharField(choices=[('open', 'Open'), ('closed', 'Closed')], default='open', max_length=50)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], max_length=50)),
                ('category', models.CharField(choices=[('profile', 'Profile'), ('resume', 'Resume'), ('job_interest', 'Job Interest'), ('academy', 'Academy')], max_length=50)),
                ('contact_method', models.CharField(choices=[('email', 'Email'), ('phone', 'Phone'), ('whatsapp', 'WhatsApp')], max_length=50)),
                ('contact_value', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_tickets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Support Ticket',
                'verbose_name_plural': 'Support Tickets',
            },
        ),
        migrations.CreateModel(
            name='UserTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_name', models.CharField(choices=[], max_length=255)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed')], default='scheduled', max_length=50)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Task',
                'verbose_name_plural': 'User Tasks',
            },
        ),
        migrations.CreateModel(
            name='WorkExperience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('drafted', 'Drafted'), ('submitted', 'Submitted'), ('rejected', 'Rejected'), ('verified', 'Verified'), ('self_verified', 'Self Verified')], default='drafted', max_length=50, verbose_name='Status')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('allow_self_verification', models.BooleanField(default=False, verbose_name='Allow Self Verification')),
                ('grade', models.CharField(choices=[('intern', 'Intern'), ('associate', 'Associate'), ('junior', 'Junior'), ('mid_level', 'Mid-Level'), ('senior', 'Senior'), ('manager', 'Manager'), ('director', 'Director'), ('cto', 'CTO'), ('cfo', 'CFO'), ('ceo', 'CEO')], max_length=50, verbose_name='Grade')),
                ('start', models.DateField(verbose_name='Start Date')),
                ('end', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('organization', models.CharField(max_length=255, verbose_name='Organization')),
                ('skills', models.CharField(blank=True, max_length=250, null=True, verbose_name='Skills')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_experiences', to='cities_light.city', verbose_name='City')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_experiences', to='common.job', verbose_name='Job')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Work Experience',
                'verbose_name_plural': 'Work Experiences',
            },
            bases=(models.Model, common.mixins.HasDurationMixin),
        ),
        migrations.CreateModel(
            name='PaystubsMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('paystubs', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='paystubs_method', to='auth_account.paystubsfile', verbose_name='Paystubs')),
                ('work_experience', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='auth_account.workexperience', verbose_name='Work Experience')),
            ],
            options={
                'verbose_name': 'Paystubs Method',
                'verbose_name_plural': 'Paystubs Methods',
            },
        ),
        migrations.AddField(
            model_name='employerlettermethod',
            name='work_experience',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='auth_account.workexperience', verbose_name='Work Experience'),
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('website', 'Website'), ('address', 'Address'), ('linkedin', 'LinkedIn'), ('whatsapp', 'WhatsApp'), ('phone', 'Phone')], default='website', max_length=50, verbose_name='Type')),
                ('value', models.CharField(max_length=255, verbose_name='Value')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Contact',
                'verbose_name_plural': 'Contacts',
                'unique_together': {('user', 'type')},
            },
        ),
        migrations.AddIndex(
            model_name='referral',
            index=models.Index(fields=['code'], name='auth_accoun_code_3f95ce_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='referraluser',
            unique_together={('referral', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='usertask',
            unique_together={('user', 'task_name')},
        ),
    ]
