"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import sys
from datetime import timedelta
from pathlib import Path

from dotenv import load_dotenv

load_dotenv(override=True)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
sys.path.insert(0, os.path.join(BASE_DIR, "apps"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-xbtb+fr8279na3c!&$1ud^tfwh^7u+7#1=#@odrkhct-@!e$_2"

# Application definition

INSTALLED_APPS = [
    "markdownfield",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "graphene_django",
    "allauth",
    "allauth.account",
    "rest_framework",
    "rest_framework.authtoken",
    "dj_rest_auth",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.openid_connect",
    "django_extensions",
    "django_filters",
    "graphql_auth",
    "graphql_jwt.refresh_token.apps.RefreshTokenConfig",
    "corsheaders",
    "colorfield",
    "cities_light",
    "phonenumber_field",
    "computedfields",
    "cachalot",
    "flex_pubsub",
]

INSTALLED_APPS += [
    "common",
    "api",
    "account",
    "ai",
    "criteria",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]


ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.request",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": os.environ.get("DB_HOST", "localhost"),
        "NAME": os.environ.get("DB_NAME", "job_seekers_api"),
        "USER": os.environ.get("DB_USER", "job_seekers_api"),
        "PASSWORD": os.environ.get("DB_PASSWORD", "job_seekers_api"),
        "PORT": os.environ.get("DB_PORT", 5432),
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATICFILES_DIRS = (os.path.join(BASE_DIR, "static/"),)
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "assets")
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
FAVICON_ROOT = os.path.join(BASE_DIR, "assets", "favicons")

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "auth_account.User"

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "graphql_auth.backends.GraphQLAuthBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]


GRAPHENE = {
    "SCHEMA": "api.schema.schema",
    "MIDDLEWARE": [
        "graphql_jwt.middleware.JSONWebTokenMiddleware",
        "common.middlewares.ErrorHandlingMiddleware",
    ],
}

GRAPHQL_JWT = {
    "JWT_VERIFY_EXPIRATION": True,
    "JWT_LONG_RUNNING_REFRESH_TOKEN": True,
    "JWT_EXPIRATION_DELTA": timedelta(minutes=5),
    "JWT_REFRESH_EXPIRATION_DELTA": timedelta(days=7),
    "JWT_GET_USER_BY_NATURAL_KEY_HANDLER": "graphql_auth.utils.get_user_by_natural_key",
    "JWT_ALLOW_ANY_CLASSES": [
        "graphql_auth.mutations.Register",
        "graphql_auth.mutations.VerifyAccount",
        "graphql_auth.mutations.ResendActivationEmail",
        "graphql_auth.mutations.SendPasswordResetEmail",
        "graphql_auth.mutations.PasswordReset",
        "graphql_auth.mutations.ObtainJSONWebToken",
        "graphql_auth.mutations.VerifyToken",
        "graphql_auth.mutations.RefreshToken",
        "graphql_auth.mutations.RevokeToken",
    ],
}

GRAPHQL_AUTH = {
    "LOGIN_ALLOWED_FIELDS": ["email"],
    "ALLOW_LOGIN_NOT_VERIFIED": False,
    "ALLOW_LOGIN_WITH_SECONDARY_EMAIL": False,
    "ALLOW_PASSWORDLESS_REGISTRATION": True,
    "REGISTER_MUTATION_FIELDS": ["email", "first_name", "last_name"],
    "EXPIRATION_ACTIVATION_TOKEN": timedelta(hours=1),
    "EXPIRATION_PASSWORD_RESET_TOKEN": timedelta(minutes=15),
    "EMAIL_TEMPLATE_VARIABLES": {
        "frontend_url": os.environ.get("FRONTEND_URL", "http://localhost:5173"),
        "frontend_url_account_verify": os.environ.get("FRONTEND_URL_ACCOUNT_VERIFY", "/auth/verify"),
        "frontend_url_password_reset": os.environ.get(
            "FRONTEND_URL_PASSWORD_RESET", "/auth/reset-password/set-password"
        ),
    },
}


SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APPS": [
            {
                "client_id": os.environ.get("GOOGLE_OAUTH_CLIENT_ID"),
                "secret": os.environ.get("GOOGLE_OAUTH_CLIENT_SECRET"),
                "key": "",
            },
        ],
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
    },
    "openid_connect": {
        "APPS": [
            {
                "provider_id": "linkedin",
                "name": "LinkedIn",
                "client_id": os.environ.get("LINKEDIN_OAUTH_CLIENT_ID"),
                "secret": os.environ.get("LINKEDIN_OAUTH_CLIENT_SECRET"),
                "settings": {
                    "server_url": "https://www.linkedin.com/oauth",
                },
            }
        ]
    },
}
SOCIALACCOUNT_ADAPTER = "account.adapters.SocialAccountAdapter"
HEADLESS_ONLY = True

REDIS_URL = os.environ.get("REDIS_URL", "redis://localhost:6379")
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL

CITIES_LIGHT_CITY_SOURCES = ["https://download.geonames.org/export/dump/cities500.zip"]

OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY", os.environ.get("OPENAI_API_KEY"))

GOOGLE_API_KEY = os.environ.get("GOOGLE_API_KEY", os.environ.get("GOOGLE_API_KEY"))

CRITERIA_SETTINGS = {
    "BASE_URL": os.environ.get("CRITERIA_BASE_URL", "https://integrations.criteriacorp.com/api/v1"),
    "AUTH_TOKEN": os.environ.get("CRITERIA_AUTH_TOKEN"),
    "AUTH_TYPE": os.environ.get("CRITERIA_AUTH_TYPE", "Bearer"),
    "WEBHOOK_SECRET": os.environ.get("CRITERIA_WEBHOOK_SECRET"),
}

PUBSUB_SETTINGS = {
    "GOOGLE_CREDENTIALS": os.environ.get("GOOGLE_CREDENTIALS"),
    "GOOGLE_PROJECT_ID": os.environ.get("GOOGLE_PROJECT_ID"),
    "TOPIC_NAME": os.environ.get("PUBSUB_TOPIC_NAME"),
    "SUBSCRIPTIONS": os.environ.get("PUBSUB_SUBSCRIPTIONS", "common_tasks, test_tasks"),
    "LISTENER_PORT": os.environ.get("PUBSUB_LISTENER_PORT", 8001),
    "BACKEND_CLASS": "flex_pubsub.backends.LocalPubSubBackend",
    "SCHEDULER_BACKEND_CLASS": "flex_pubsub.scheduler.LocalSchedulerBackend",
}
